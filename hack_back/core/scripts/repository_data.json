{
  "repository": {
    "owner": "Wizhill05",
    "name": "meals",
    "branch": "main",
    "files": [
      {
        "name": "settings.json",
        "path": ".vscode/settings.json",
        "type": "blob",
        "content": "{\n    \"java.configuration.updateBuildConfiguration\": \"automatic\",\n    \"editor.defaultFormatter\": \"Dart-Code.flutter\"\n}"
      },
      {
        "name": "Runner-Bridging-Header.h",
        "path": "ios/Runner/Runner-Bridging-Header.h",
        "type": "blob",
        "content": "#import \"GeneratedPluginRegistrant.h\"\n"
      },
      {
        "name": "adminHome.dart",
        "path": "lib/admins/adminHome.dart",
        "type": "blob",
        "content": "import 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:project02_hackloop/admins/adminDash.dart';\nimport 'package:project02_hackloop/main.dart';\nimport 'package:project02_hackloop/screens/deleteUser.dart';\nimport 'package:project02_hackloop/screens/signin.dart';\nimport 'package:project02_hackloop/screens/signup.dart';\nimport 'package:project02_hackloop/utils/color.dart';\nimport 'package:project02_hackloop/widgets/reusable.dart';\n\nclass adminHome extends StatefulWidget {\n  const adminHome({super.key});\n\n  @override\n  State<adminHome> createState() => _adminHomeState();\n}\n\nclass _adminHomeState extends State<adminHome> {\n  TextEditingController breakfastText = TextEditingController();\n  TextEditingController lunchText = TextEditingController();\n  TextEditingController snacksText = TextEditingController();\n  TextEditingController dinnerText = TextEditingController();\n  MealData? mealData;\n  final FirebaseAuth _auth = FirebaseAuth.instance;\n\n  @override\n  void initState() {\n    super.initState();\n    getMealData('wVjEr23OuiRIJMMTw1ZD').then((data) {\n      setState(() {\n        mealData = data;\n        print(data.breakfast);\n      });\n    });\n  }\n\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        width: MediaQuery.of(context).size.width,\n        height: MediaQuery.of(context).size.height,\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            colors: [toColor(\"BB1009\"), toColor(\"610000\")],\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n          ),\n        ),\n        child: SingleChildScrollView(\n          child: Column(\n            children: <Widget>[\n              AppBar(\n                centerTitle: true,\n                backgroundColor: toColor(\"aa1009\"),\n                title: Text('Admin Home'),\n                foregroundColor: toColor(\"e4e4d4\"),\n                actions: <Widget>[\n                  PopupMenuButton<int>(\n                    icon: Icon(Icons.settings),\n                    itemBuilder: (BuildContext context) => <PopupMenuItem<int>>[\n                      const PopupMenuItem<int>(\n                        value: 0,\n                        child: Text('Dashboard'),\n                      ),\n                      const PopupMenuItem<int>(\n                        value: 1,\n                        child: Text('Logout'),\n                      ),\n                    ],\n                    onSelected: (int value) async {\n                      switch (value) {\n                        case 0:\n                          Navigator.push(\n                              context,\n                              MaterialPageRoute(\n                                  builder: (context) => adminDash()));\n                          break;\n                        case 1:\n                          await FirebaseAuth.instance.signOut().then((value) =>\n                              Navigator.pushAndRemoveUntil(\n                                  context,\n                                  MaterialPageRoute(\n                                      builder: (context) => SignIn()),\n                                  (Route<dynamic> route) => false));\n                          break;\n                      }\n                    },\n                  ),\n                ],\n              ),\n              SizedBox(height: 60),\n              Padding(\n                  padding: EdgeInsets.fromLTRB(0, 0, 0, 0),\n                  child: logoWidget(\"assets/logo/meals_large.png\", 200, 100)),\n              Padding(\n                padding: const EdgeInsets.fromLTRB(40, 10, 40, 25),\n                child: Divider(\n                  color: toColor(\"d4d4d4\"),\n                  thickness: 2,\n                ),\n              ),\n              Padding(\n                  padding: const EdgeInsets.fromLTRB(20, 0, 20, 0),\n                  child: inputCard(\"breakfast\", () {\n                    FirebaseFirestore.instance\n                        .collection('mealsfortom')\n                        .doc('wVjEr23OuiRIJMMTw1ZD')\n                        .set({\"breakfast\": breakfastText.text},\n                            SetOptions(merge: true));\n                    Navigator.pushReplacement(context,\n                        MaterialPageRoute(builder: (context) => adminHome()));\n                    ;\n                  }, breakfastText, \"${mealData?.breakfast}\")),\n              Padding(\n                  padding: const EdgeInsets.fromLTRB(20, 0, 20, 0),\n                  child: inputCard(\"lunch\", () {\n                    FirebaseFirestore.instance\n                        .collection('mealsfortom')\n                        .doc('wVjEr23OuiRIJMMTw1ZD')\n                        .set(\n                            {\"lunch\": lunchText.text}, SetOptions(merge: true));\n                    Navigator.pushReplacement(context,\n                        MaterialPageRoute(builder: (context) => adminHome()));\n                    ;\n                  }, lunchText, \"${mealData?.lunch}\")),\n              Padding(\n                  padding: const EdgeInsets.fromLTRB(20, 0, 20, 0),\n                  child: inputCard(\"snacks\", () {\n                    FirebaseFirestore.instance\n                        .collection('mealsfortom')\n                        .doc('wVjEr23OuiRIJMMTw1ZD')\n                        .set({\"snacks\": snacksText.text},\n                            SetOptions(merge: true));\n                    Navigator.pushReplacement(context,\n                        MaterialPageRoute(builder: (context) => adminHome()));\n                    ;\n                  }, snacksText, \"${mealData?.snacks}\")),\n              Padding(\n                  padding: const EdgeInsets.fromLTRB(20, 0, 20, 0),\n                  child: inputCard(\"dinner\", () {\n                    FirebaseFirestore.instance\n                        .collection('mealsfortom')\n                        .doc('wVjEr23OuiRIJMMTw1ZD')\n                        .set({\"dinner\": dinnerText.text},\n                            SetOptions(merge: true));\n                    Navigator.pushReplacement(context,\n                        MaterialPageRoute(builder: (context) => adminHome()));\n                    ;\n                  }, dinnerText, \"${mealData?.dinner}\")),\n              Padding(\n                padding: const EdgeInsets.fromLTRB(40, 30, 40, 0),\n                child: Divider(\n                  color: toColor(\"d4d4d4\"),\n                  thickness: 2,\n                ),\n              ),\n              Padding(\n                padding: const EdgeInsets.fromLTRB(0, 25, 0, 25),\n                child: Text(\n                  \"User Settings\",\n                  style: TextStyle(\n                      color: toColor(\"d4d4d4\"),\n                      fontWeight: FontWeight.bold,\n                      fontSize: 30),\n                ),\n              ),\n              Padding(\n                padding: const EdgeInsets.symmetric(horizontal: 20),\n                child: Column(\n                  children: [\n                    Container(\n                      width: MediaQuery.of(context).size.width - 80,\n                      child: uiButton(context, \"New User\", () {\n                        Navigator.push(context,\n                            MaterialPageRoute(builder: (context) => signup()));\n                      }),\n                    ),\n                    Container(\n                      width: MediaQuery.of(context).size.width - 80,\n                      child: uiButton(context, \"Delete User\", () {\n                        Navigator.push(\n                            context,\n                            MaterialPageRoute(\n                                builder: (context) => deleteUser()));\n                      }),\n                    ),\n                  ],\n                ),\n              ),\n              SizedBox(\n                height: 100,\n              )\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
      },
      {
        "name": "AppDelegate.swift",
        "path": "ios/Runner/AppDelegate.swift",
        "type": "blob",
        "content": "import UIKit\nimport Flutter\n\n@UIApplicationMain\n@objc class AppDelegate: FlutterAppDelegate {\n  override func application(\n    _ application: UIApplication,\n    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?\n  ) -> Bool {\n    GeneratedPluginRegistrant.register(with: self)\n    return super.application(application, didFinishLaunchingWithOptions: launchOptions)\n  }\n}\n"
      },
      {
        "name": "google-services.json",
        "path": "android/app/google-services.json",
        "type": "blob",
        "content": "{\n  \"project_info\": {\n    \"project_number\": \"824585926919\",\n    \"firebase_url\": \"https://hostelmessmanagent-default-rtdb.firebaseio.com\",\n    \"project_id\": \"hostelmessmanagent\",\n    \"storage_bucket\": \"hostelmessmanagent.appspot.com\"\n  },\n  \"client\": [\n    {\n      \"client_info\": {\n        \"mobilesdk_app_id\": \"1:824585926919:android:0151c1cf6cc51660f06da2\",\n        \"android_client_info\": {\n          \"package_name\": \"com.example.learning_tutorial\"\n        }\n      },\n      \"oauth_client\": [],\n      \"api_key\": [\n        {\n          \"current_key\": \"AIzaSyATkBZEF9GzYJLjlpL1qfePf55uWQIvC-8\"\n        }\n      ],\n      \"services\": {\n        \"appinvite_service\": {\n          \"other_platform_oauth_client\": []\n        }\n      }\n    },\n    {\n      \"client_info\": {\n        \"mobilesdk_app_id\": \"1:824585926919:android:846db2ffc89a75f1f06da2\",\n        \"android_client_info\": {\n          \"package_name\": \"com.recode.hackloop2024\"\n        }\n      },\n      \"oauth_client\": [],\n      \"api_key\": [\n        {\n          \"current_key\": \"AIzaSyATkBZEF9GzYJLjlpL1qfePf55uWQIvC-8\"\n        }\n      ],\n      \"services\": {\n        \"appinvite_service\": {\n          \"other_platform_oauth_client\": []\n        }\n      }\n    }\n  ],\n  \"configuration_version\": \"1\"\n}"
      },
      {
        "name": "README.md",
        "path": "README.md",
        "type": "blob",
        "content": "# Meals\n\n\n**Meals** is an innovative app designed to modernize the meal management process in hostel messes by replacing the traditional coupon system with a digital solution. This app provides a streamlined experience for both students and hostel staff, improving convenience, security, and food management.\n\n\n## The Problem with the Traditional Coupon System\n\n\nThe traditional coupon system in hostels presents several challenges:\n1. **Inconvenience**: Students must physically go to the hostel office to collect their monthly coupon booklets, which is an additional step if they are on campus.\n2. **Security Risks**: If a coupon booklet is lost or stolen, students lose access to all their coupons without a chance of recovery or refund. This can result in not being able to get meals.\n3. **Cost Inefficiency**: Students are charged for all meals in advance, regardless of whether they use them. If they skip a meal, the cost of the coupon is still deducted.\n4. **Food Management Challenges**: Hostels often struggle to predict daily meal attendance, leading to either food wastage from over-preparation or shortages when fewer students show up.\n\n\n## How Meals Solves These Problems\n\n\n- **Seamless Digital Management**: Students log in to the app using their unique ID and password. Upon login, they see options for the day’s meals (breakfast, lunch, snacks, and dinner) and can select or deselect them as needed. By default, all meal cards are selected, but students can modify their choices up to two hours before each meal period starts.\n- **Cost-Effective Meal Selection**: If a student opts out of a meal, they will not incur charges for that meal. The app calculates daily and monthly expenditures based on the meals selected, allowing students to easily track their spending.\n- **Accurate Attendance Tracking**: Each student’s app generates a QR code that refreshes for each meal period. The same app, when accessed with an admin account, includes a QR code scanner for mess staff to mark attendance. This system ensures accurate tracking and prevents fraud or misuse.\n- **Real-Time Food Menu**: Students can view the menu for each meal of the day, which is not possible with the traditional coupon system. This transparency helps students plan their meals better.\n- **Enhanced Security and Flexibility**: The app eliminates the issues of lost coupon booklets and ensures that students are only charged for the meals they select. This also means students don’t need to worry about carrying physical coupons or managing their loss.\n- **Efficient Food Preparation**: By providing real-time data on meal selections, the app helps hostel mess staff better predict the number of meals needed, reducing food wastage and ensuring that all students receive their meals on time.\n\n\n## Design\n\n\nMeals features a modern two-tone design with red and white as its primary colors, creating a clean, visually appealing, and user-friendly interface that enhances the overall user experience.\n\n"
      },
      {
        "name": "analysis_options.yaml",
        "path": "analysis_options.yaml",
        "type": "blob",
        "content": "include: package:flutter_lints/flutter.yaml\n"
      },
      {
        "name": "RunnerTests.swift",
        "path": "ios/RunnerTests/RunnerTests.swift",
        "type": "blob",
        "content": "import Flutter\nimport UIKit\nimport XCTest\n\nclass RunnerTests: XCTestCase {\n\n  func testExample() {\n    // If you add code to the Runner application, consider adding tests here.\n    // See https://developer.apple.com/documentation/xctest for more information about using XCTest.\n  }\n\n}\n"
      },
      {
        "name": "adminDash.dart",
        "path": "lib/admins/adminDash.dart",
        "type": "blob",
        "content": "import 'package:firebase_core/firebase_core.dart';\nimport 'package:flutter/material.dart';\nimport 'package:project02_hackloop/admins/adminHome.dart';\nimport 'package:project02_hackloop/main.dart';\nimport 'package:project02_hackloop/utils/color.dart';\nimport 'package:project02_hackloop/widgets/reusable.dart';\nimport 'package:qr_code_dart_scan/qr_code_dart_scan.dart';\n\nclass adminDash extends StatefulWidget {\n  const adminDash({super.key});\n\n  @override\n  State<adminDash> createState() => _adminDashState();\n}\n\nclass _adminDashState extends State<adminDash> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        backgroundColor: toColor(\"bb1009\"),\n        body: Padding(\n          padding: const EdgeInsets.all(8.0),\n          child: QRCodeDartScanView(\n              scanInvertedQRCode:\n                  true, // enable scan invert qr code ( default = false)\n              typeScan: TypeScan.live,\n              onCapture: (Result result) {\n                updateDataInFirestore(\n                    \"attendance\",\n                    result.toString().substring(0, 10),\n                    convHrToMeal(\n                        int.parse(result.toString().substring(10, 11))),\n                    true);\n                showDialog(\n                    context: context,\n                    builder: (context) => alertMe(\n                        context,\n                        \"Updated\",\n                        [\n                          TextButton(\n                              onPressed: () {\n                                Navigator.push(\n                                    context,\n                                    MaterialPageRoute(\n                                        builder: (context) => adminHome()));\n                              },\n                              child: Text(\"Ok\"))\n                        ],\n                        Text(\n                            \"attendece/${result.toString().substring(0, 10)}/${convHrToMeal(int.parse(result.toString().substring(10, 11)))}\")));\n              }),\n        ));\n  }\n}\n"
      },
      {
        "name": "barGraph.dart",
        "path": "lib/graph/barGraph.dart",
        "type": "blob",
        "content": "import 'package:fl_chart/fl_chart.dart';\nimport 'package:flutter/material.dart';\nimport 'package:project02_hackloop/graph/barData.dart';\nimport 'package:project02_hackloop/utils/color.dart';\nimport 'package:project02_hackloop/utils/time.dart';\n\nclass MyBar extends StatelessWidget {\n  final List<int> thisWeek;\n  const MyBar({super.key, required this.thisWeek});\n\n  @override\n  Widget build(BuildContext context) {\n    BarData mydata = BarData(\n        d0: thisWeek[0],\n        d1: thisWeek[1],\n        d2: thisWeek[2],\n        d3: thisWeek[3],\n        d4: thisWeek[4],\n        d5: thisWeek[5],\n        d6: thisWeek[6]);\n    mydata.initializeBarData();\n\n    return BarChart(BarChartData(\n        maxY: 150,\n        minY: 50,\n        gridData: FlGridData(\n            drawVerticalLine: false,\n            drawHorizontalLine: true,\n            getDrawingHorizontalLine: (value) => FlLine(\n                  color: toColor(\n                      \"bb1009\"), // set the color of the horizontal lines to white\n                  strokeWidth: 1,\n                )),\n        borderData: FlBorderData(show: false),\n        titlesData: FlTitlesData(\n          show: true,\n          topTitles: AxisTitles(sideTitles: SideTitles(showTitles: false)),\n          leftTitles: AxisTitles(\n              sideTitles: SideTitles(\n            showTitles: true,\n            getTitlesWidget: getLeft,\n            reservedSize: 34,\n          )),\n          rightTitles: AxisTitles(sideTitles: SideTitles(showTitles: false)),\n          bottomTitles: AxisTitles(\n              sideTitles: SideTitles(\n                  showTitles: true,\n                  getTitlesWidget: getBottom,\n                  reservedSize: 50)),\n        ),\n        barGroups: mydata.barData\n            .map((e) => BarChartGroupData(x: e.x, barRods: [\n                  BarChartRodData(\n                    toY: e.y.toDouble(), // convert integer to double\n                    color: toColor(\"d4d4d4\"),\n                    width: 20,\n                    borderRadius: BorderRadius.circular(2),\n                  )\n                ]))\n            .toList()));\n  }\n}\n\nWidget getBottom(double value, TitleMeta meta) {\n  var style1 = TextStyle(\n      color: toColor(\"d4d4d4\"), fontWeight: FontWeight.bold, fontSize: 16);\n\n  Widget text;\n  String a0, a1, a2, a3, a4, a5, a6;\n  a0 = pastDate(7).toString();\n  a1 = pastDate(6).toString();\n  a2 = pastDate(5).toString();\n  a3 = pastDate(4).toString();\n  a4 = pastDate(3).toString();\n  a5 = pastDate(2).toString();\n  a6 = pastDate(1).toString();\n  switch (value.toInt()) {\n    case 0:\n      text = Text(\n        a0,\n        style: style1,\n      );\n      break;\n    case 1:\n      text = Text(\n        a1,\n        style: style1,\n      );\n      break;\n    case 2:\n      text = Text(\n        a2,\n        style: style1,\n      );\n      break;\n    case 3:\n      text = Text(\n        a3,\n        style: style1,\n      );\n      break;\n    case 4:\n      text = Text(\n        a4,\n        style: style1,\n      );\n      break;\n    case 5:\n      text = Text(\n        a5,\n        style: style1,\n      );\n      break;\n    case 6:\n      text = Text(\n        a6,\n        style: style1,\n      );\n      break;\n    default:\n      text = Text(\n        \"\",\n        style: style1,\n      );\n      break;\n  }\n  return SideTitleWidget(child: text, axisSide: meta.axisSide);\n}\n\nWidget getLeft(double value, TitleMeta meta) {\n  var style1 = TextStyle(color: toColor(\"d4d4d4\"), fontSize: 14);\n\n  Widget text;\n  text = Text(\n    value.toInt().toString(),\n    style: style1,\n  );\n\n  return SideTitleWidget(child: text, axisSide: meta.axisSide);\n}\n"
      },
      {
        "name": "main.dart",
        "path": "lib/main.dart",
        "type": "blob",
        "content": "import 'dart:async';\n\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:project02_hackloop/Screens/signin.dart';\nimport 'package:google_fonts/google_fonts.dart';\nimport 'package:firebase_core/firebase_core.dart';\nimport 'package:project02_hackloop/utils/time.dart';\nimport 'package:project02_hackloop/widgets/reusable.dart';\nimport 'firebase_options.dart';\nimport 'package:connectivity_plus/connectivity_plus.dart';\n\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  var connectivityResult = await Connectivity().checkConnectivity();\n  if (connectivityResult == ConnectivityResult.none) {\n    debugPrint(\"Connection Error\");\n    SnackBar(\n      content: Text(\"Connection Error, Try Again\"),\n    );\n    return;\n  }\n  await Firebase.initializeApp(\n    options: DefaultFirebaseOptions.currentPlatform,\n  );\n  runApp(const MainApp());\n}\n\nclass MainApp extends StatelessWidget {\n  const MainApp({Key? key}) : super(key: key);\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n        debugShowCheckedModeBanner: false,\n        title: 'M.E.A.L.S.',\n        theme: ThemeData(\n          useMaterial3: false,\n          fontFamily: GoogleFonts.dmSans().fontFamily,\n          primarySwatch: Colors.red,\n        ),\n        home: AuthenticationWrapper());\n  }\n}\n\nclass AuthenticationWrapper extends StatefulWidget {\n  @override\n  _AuthenticationWrapperState createState() => _AuthenticationWrapperState();\n}\n\nclass _AuthenticationWrapperState extends State<AuthenticationWrapper> {\n  @override\n  void initState() {\n    super.initState();\n    WidgetsBinding.instance.addPostFrameCallback((_) {\n      checkUserAuthentication();\n    });\n  }\n\n  void checkUserAuthentication() async {\n    User? user = FirebaseAuth.instance.currentUser;\n    if (user != null) {\n      Navigator.pushReplacement(\n        context,\n        MaterialPageRoute(builder: (context) => isAdmin(getUsername())),\n      );\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return SignIn();\n  }\n}\n\nclass MealData {\n  String breakfast, lunch, snacks, dinner;\n  MealData(\n      {required this.breakfast,\n      required this.lunch,\n      required this.snacks,\n      required this.dinner});\n}\n\nFuture<MealData> getMealData(String documentId) async {\n  final db = FirebaseFirestore.instance;\n  final collection = db.collection('mealsfortom');\n  final document = collection.doc('wVjEr23OuiRIJMMTw1ZD');\n  final data = await document.get();\n  final mealData = data.data();\n\n  String breakfast = 'default',\n      lunch = 'default',\n      snacks = 'default',\n      dinner = 'default';\n  if (mealData == null) {\n    print(\"null data\");\n  } else {\n    breakfast = await (mealData['breakfast'] as FutureOr<String>?) ?? 'default';\n    lunch = await (mealData['lunch'] as FutureOr<String>?) ?? 'default';\n    snacks = await (mealData['snacks'] as FutureOr<String>?) ?? 'default';\n    dinner = await (mealData['dinner'] as FutureOr<String>?) ?? 'default';\n  }\n  return MealData(\n      breakfast: breakfast, lunch: lunch, snacks: snacks, dinner: dinner);\n}\n\nclass ChoiceData {\n  bool breakfast, lunch, snacks, dinner;\n  ChoiceData(\n      {required this.breakfast,\n      required this.lunch,\n      required this.snacks,\n      required this.dinner});\n}\n\nFuture<ChoiceData> getChoiceData(String documentId) async {\n  final db = FirebaseFirestore.instance;\n  final collection = db.collection('choice');\n  final document = collection.doc(documentId);\n  final data = await document.get();\n  final choiceData = data.data();\n\n  bool breakfast = true, lunch = true, snacks = true, dinner = true;\n  if (choiceData == null) {\n    print(\"null data\");\n  } else {\n    breakfast = await (choiceData['breakfast'] as FutureOr<bool>?) ?? true;\n    lunch = await (choiceData['lunch'] as FutureOr<bool>?) ?? true;\n    snacks = await (choiceData['snacks'] as FutureOr<bool>?) ?? true;\n    dinner = await (choiceData['dinner'] as FutureOr<bool>?) ?? true;\n  }\n  return ChoiceData(\n      breakfast: breakfast, lunch: lunch, snacks: snacks, dinner: dinner);\n}\n\nFuture<void> createDocumentWithId(String collectionName, String documentId,\n    Map<String, dynamic> documentData) async {\n  FirebaseFirestore.instance\n      .collection(collectionName)\n      .doc(documentId)\n      .set(documentData)\n      .then((value) => print(\"Document added\"))\n      .catchError((error) => print(\"Failed to add document: $error\"));\n}\n\nFuture<void> updateDataInFirestore(String collectionName, String documentId,\n    String fieldName, var newValue) async {\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n\n  try {\n    await _firestore.collection(collectionName).doc(documentId).update({\n      fieldName: newValue,\n    });\n    print('Data updated successfully!');\n  } catch (e) {\n    print('Error updating data: $e');\n  }\n}\n\nclass expData {\n  int d0 = 0, d1 = 0, d2 = 0, d3 = 0, d4 = 0, d5 = 0, d6 = 0;\n  expData({\n    required this.d0,\n    required this.d1,\n    required this.d2,\n    required this.d3,\n    required this.d4,\n    required this.d5,\n    required this.d6,\n  });\n}\n\nFuture<expData> getDailyExp() async {\n  final db = FirebaseFirestore.instance;\n  final collection = db.collection('fees');\n  final document = collection.doc('daily');\n  final data = await document.get();\n  final exp = data.data();\n  String d;\n  int d0 = 0, d1 = 0, d2 = 0, d3 = 0, d4 = 0, d5 = 0, d6 = 0;\n  if (exp == null) {\n    print(\"null data\");\n  } else {\n    d = await (exp[getUsername()] as FutureOr<String>?) ??\n        '0000000000000000000000000000000';\n    d0 = convToExpence(d[pastDate(7) - 1]);\n    d1 = convToExpence(d[pastDate(6) - 1]);\n    d2 = convToExpence(d[pastDate(5) - 1]);\n    d3 = convToExpence(d[pastDate(4) - 1]);\n    d4 = convToExpence(d[pastDate(3) - 1]);\n    d5 = convToExpence(d[pastDate(2) - 1]);\n    d6 = convToExpence(d[pastDate(1) - 1]);\n  }\n  return expData(d0: d0, d1: d1, d2: d2, d3: d3, d4: d4, d5: d5, d6: d6);\n}\n\nFuture<double> fullMonthExp() async {\n  final db = FirebaseFirestore.instance;\n  final collection = db.collection('fees');\n  final document = collection.doc('daily');\n  final data = await document.get();\n  final exp = data.data();\n  double Sum = 0;\n  String d;\n  if (exp == null) {\n    print(\"null data\");\n  } else {\n    d = await (exp[getUsername()] as FutureOr<String>?) ??\n        '0000000000000000000000000000000';\n    for (var i = 0; i < 31; i++) {\n      Sum += convToExpence(d[i]);\n    }\n  }\n  return Sum;\n}\n"
      },
      {
        "name": "dashboard.dart",
        "path": "lib/screens/dashboard.dart",
        "type": "blob",
        "content": "import 'package:flutter/material.dart';\nimport 'package:project02_hackloop/graph/barGraph.dart';\nimport 'package:project02_hackloop/main.dart';\nimport 'package:project02_hackloop/utils/color.dart';\n\nclass dash extends StatefulWidget {\n  const dash({super.key});\n\n  @override\n  State<dash> createState() => _dashState();\n}\n\nclass _dashState extends State<dash> {\n  List<int> weekExp = [0,0,0,0,0,0,0];\n  expData? myWeekExp;\n  double fullMonth = 0;\n\n  void initState() {\n    super.initState();\n    getDailyExp().then((data) {\n      setState(() {\n        myWeekExp = data;\n        weekExp = [\n          myWeekExp!.d0,\n          myWeekExp!.d1,\n          myWeekExp!.d2,\n          myWeekExp!.d3,\n          myWeekExp!.d4,\n          myWeekExp!.d5,\n          myWeekExp!.d6\n        ];\n        print(myWeekExp);\n      });\n    });\n    super.initState();\n    fullMonthExp().then((data){\n      setState(() {\n        fullMonth = data;\n      });\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        width: MediaQuery.of(context).size.width,\n        height: MediaQuery.of(context).size.height,\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            colors: [toColor(\"BB1009\"), toColor(\"610000\")],\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n          )),\n          child: SingleChildScrollView(\n            child: Padding(\n              padding: const EdgeInsets.fromLTRB(20,0,20,20),\n              child: Column(\n                children: <Widget>[\n                  Padding(\n                    padding: const EdgeInsets.fromLTRB(10, 80, 10, 40),\n                    child: Text(\"Expenditure Dashboard\", style: TextStyle(color: toColor(\"d4d4d4\"), fontSize: 30, fontWeight: FontWeight.bold, ),textAlign: TextAlign.center,),\n                  ),\n                  Divider(\n                    color: toColor(\"d4d4d4\"),\n                    thickness: 1,\n                  ),\n                  Padding(\n                    padding: const EdgeInsets.fromLTRB(0, 40, 0, 0),\n                    child: SizedBox(\n                      height: 200,\n                      child: MyBar(thisWeek: weekExp,)\n                    ),\n                  ),\n                  Padding(\n                    padding: const EdgeInsets.fromLTRB(10, 0, 10, 20),\n                    child: Text(\"Daily Expenditure\", style: TextStyle(color: toColor(\"d4d4d4\"), fontSize: 20, fontWeight: FontWeight.bold),),\n                  ),\n                  Divider(\n                    color: toColor(\"d4d4d4\"),\n                    thickness: 1,\n                  ),\n                  SingleChildScrollView(\n                    scrollDirection: Axis.horizontal,\n                    child: Padding(\n                      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 20),\n                      child: Row(\n                        children: [\n                          Card(\n                            elevation: 5,\n                            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),\n                            \n                            color: toColor(\"d4d4d4\"),\n                            child: Container(\n                              width: MediaQuery.of(context).size.width-100,\n                              child: Padding(\n                                padding: EdgeInsets.fromLTRB(20, 30, 20, 30),\n                                child: Text(\"Current Month: ₹${fullMonth}\", style: TextStyle(color: toColor(\"666666\"), fontWeight: FontWeight.bold,fontSize: 18),),\n                              ),\n                            )\n                          ),\n                        ],\n                      ),\n                    ),\n                  ),\n                ]\n              )\n            )\n          )\n      )\n    );\n  }\n}"
      },
      {
        "name": "firebase_options.dart",
        "path": "lib/firebase_options.dart",
        "type": "blob",
        "content": "// File generated by FlutterFire CLI.\n// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members\nimport 'package:firebase_core/firebase_core.dart' show FirebaseOptions;\nimport 'package:flutter/foundation.dart'\n    show defaultTargetPlatform, kIsWeb, TargetPlatform;\n\n/// Default [FirebaseOptions] for use with your Firebase apps.\n///\n/// Example:\n/// ```dart\n/// import 'firebase_options.dart';\n/// // ...\n/// await Firebase.initializeApp(\n///   options: DefaultFirebaseOptions.currentPlatform,\n/// );\n/// ```\nclass DefaultFirebaseOptions {\n  static FirebaseOptions get currentPlatform {\n    if (kIsWeb) {\n      throw UnsupportedError(\n        'DefaultFirebaseOptions have not been configured for web - '\n        'you can reconfigure this by running the FlutterFire CLI again.',\n      );\n    }\n    switch (defaultTargetPlatform) {\n      case TargetPlatform.android:\n        return android;\n      case TargetPlatform.iOS:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions have not been configured for ios - '\n          'you can reconfigure this by running the FlutterFire CLI again.',\n        );\n      case TargetPlatform.macOS:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions have not been configured for macos - '\n          'you can reconfigure this by running the FlutterFire CLI again.',\n        );\n      case TargetPlatform.windows:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions have not been configured for windows - '\n          'you can reconfigure this by running the FlutterFire CLI again.',\n        );\n      case TargetPlatform.linux:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions have not been configured for linux - '\n          'you can reconfigure this by running the FlutterFire CLI again.',\n        );\n      default:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions are not supported for this platform.',\n        );\n    }\n  }\n\n  static const FirebaseOptions android = FirebaseOptions(\n    apiKey: 'AIzaSyATkBZEF9GzYJLjlpL1qfePf55uWQIvC-8',\n    appId: '1:824585926919:android:846db2ffc89a75f1f06da2',\n    messagingSenderId: '824585926919',\n    projectId: 'hostelmessmanagent',\n    databaseURL: 'https://hostelmessmanagent-default-rtdb.firebaseio.com',\n    storageBucket: 'hostelmessmanagent.appspot.com',\n  );\n}\n"
      },
      {
        "name": "home.dart",
        "path": "lib/screens/home.dart",
        "type": "blob",
        "content": "// ignore_for_file: unused_local_variable\n\nimport 'package:flutter/material.dart';\nimport 'package:project02_hackloop/admins/adminHome.dart';\nimport 'package:project02_hackloop/main.dart';\nimport 'package:project02_hackloop/utils/color.dart';\nimport 'package:project02_hackloop/utils/time.dart';\nimport 'package:project02_hackloop/widgets/reusable.dart';\n\nclass HomeScreen extends StatefulWidget {\n  HomeScreen({Key? key}) : super(key: key);\n  @override\n  _HomeScreenState createState() => _HomeScreenState();\n}\n\nclass _HomeScreenState extends State<HomeScreen> {\n  bool isThumbsUp0 = true;\n  bool isThumbsUp1 = true;\n  bool isThumbsUp2 = true;\n  bool isThumbsUp3 = true;\n  ChoiceData? choiceData;\n  MealData? mealData;\n\n  @override\n  void initState() {\n    super.initState();\n    getMealData('wVjEr23OuiRIJMMTw1ZD').then((data) {\n      setState(() {\n        mealData = data;\n      });\n    });\n    super.initState();\n    getChoiceData(getUsername()).then((data) {\n      setState(() {\n        choiceData = data;\n        isThumbsUp0 = choiceData!.breakfast;\n        isThumbsUp1 = choiceData!.lunch;\n        isThumbsUp2 = choiceData!.snacks;\n        isThumbsUp3 = choiceData!.dinner;\n      });\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    int hourNow = hournow();\n    int breTime = 5, lunTime = 10, sncTime = 15, dinTime = 17;\n\n    void toggleThumbsUp0() {\n      if (hourNow < breTime) {\n        setState(() {\n          isThumbsUp0 = !isThumbsUp0;\n          updateDataInFirestore(\n              'choice', getUsername(), \"breakfast\", isThumbsUp0);\n        });\n      } else {\n        showDialog(\n            context: context,\n            builder: (context) => alertMe(\n                context,\n                \"Too Late!\",\n                [\n                  TextButton(\n                      onPressed: () {\n                        Navigator.of(context).pop();\n                      },\n                      child: Text(\"Ok\"))\n                ],\n                Text(\"You Should Update this before 5AM\")));\n      }\n    }\n\n    void toggleThumbsUp1() {\n      if (hourNow < lunTime) {\n        setState(() {\n          isThumbsUp1 = !isThumbsUp1;\n          updateDataInFirestore('choice', getUsername(), \"lunch\", isThumbsUp1);\n        });\n      } else {\n        showDialog(\n            context: context,\n            builder: (context) => alertMe(\n                context,\n                \"Too Late!\",\n                [\n                  TextButton(\n                      onPressed: () {\n                        Navigator.of(context).pop();\n                      },\n                      child: Text(\"Ok\"))\n                ],\n                Text(\"You Should Update this before 10AM\")));\n      }\n    }\n\n    void toggleThumbsUp2() {\n      if (hourNow < sncTime) {\n        setState(() {\n          isThumbsUp2 = !isThumbsUp2;\n          updateDataInFirestore('choice', getUsername(), \"snacks\", isThumbsUp2);\n        });\n      } else {\n        showDialog(\n            context: context,\n            builder: (context) => alertMe(\n                context,\n                \"Too Late!\",\n                [\n                  TextButton(\n                      onPressed: () {\n                        Navigator.of(context).pop();\n                      },\n                      child: Text(\"Ok\"))\n                ],\n                Text(\"You Should Update this before 3PM\")));\n      }\n    }\n\n    void toggleThumbsUp3() {\n      if (hourNow < dinTime) {\n        setState(() {\n          isThumbsUp3 = !isThumbsUp3;\n          updateDataInFirestore('choice', getUsername(), \"dinner\", isThumbsUp3);\n        });\n      } else {\n        showDialog(\n            context: context,\n            builder: (context) => alertMe(\n                context,\n                \"Too Late!\",\n                [\n                  TextButton(\n                      onPressed: () {\n                        Navigator.of(context).pop();\n                      },\n                      child: Text(\"Ok\"))\n                ],\n                Text(\"You Should Update this before 5PM\")));\n      }\n    }\n\n    return Scaffold(\n      body: Container(\n          width: MediaQuery.of(context).size.width,\n          height: MediaQuery.of(context).size.height,\n          decoration: BoxDecoration(\n              gradient: LinearGradient(\n            colors: [toColor(\"BB1009\"), toColor(\"610000\")],\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n          )),\n          child: SingleChildScrollView(\n              child: Padding(\n            padding: const EdgeInsets.fromLTRB(20, 0, 20, 20),\n            child: Column(children: <Widget>[\n              Padding(\n                  padding: EdgeInsets.fromLTRB(10, 150, 10, 00),\n                  child: fadeMeIn(\n                      logoWidget(\"assets/logo/meals.png\", 140, 60), 0)),\n              Padding(\n                  padding: EdgeInsets.fromLTRB(10, 0, 10, 40),\n                  child: fadeMeIn(\n                      Text(\"For \" + tomdate(),\n                          style: TextStyle(\n                              color: toColor(\"d4d4d4\"),\n                              fontSize: 18,\n                              fontWeight: FontWeight.bold)),\n                      0)),\n              fadeMeIn(\n                  Padding(\n                    padding: const EdgeInsets.all(4.0),\n                    child: newcard(context,\n                        \"Breakfast is ${mealData?.breakfast}\", toggleThumbsUp0,\n                        isThumbsUp: isThumbsUp0),\n                  ),\n                  50),\n              fadeMeIn(\n                  Padding(\n                    padding: const EdgeInsets.all(4.0),\n                    child: newcard(\n                        context, \"Lunch is ${mealData?.lunch}\", toggleThumbsUp1,\n                        isThumbsUp: isThumbsUp1),\n                  ),\n                  100),\n              fadeMeIn(\n                  Padding(\n                    padding: const EdgeInsets.all(4.0),\n                    child: newcard(context, \"Snacks is ${mealData?.snacks}\",\n                        toggleThumbsUp2,\n                        isThumbsUp: isThumbsUp2),\n                  ),\n                  150),\n              fadeMeIn(\n                  Padding(\n                    padding: const EdgeInsets.all(4.0),\n                    child: newcard(context, \"Dinner is ${mealData?.dinner}\",\n                        toggleThumbsUp3,\n                        isThumbsUp: isThumbsUp3),\n                  ),\n                  200),\n            ]),\n          ))),\n    );\n  }\n}\n"
      },
      {
        "name": "info.dart",
        "path": "lib/screens/info.dart",
        "type": "blob",
        "content": "import 'package:flutter/material.dart';\nimport 'package:project02_hackloop/utils/color.dart';\n\nclass infoscreen extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Meal Efficiency & Automated Logistics System'),\n        backgroundColor: toColor(\"bb1009\"),\n      ),\n      body: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            SizedBox(height: 16),\n            Text(\n              \"=> You can select which meals you want to eat: This can be done using selecting the thumbs up button in the 'meals' section.\\n\",\n              style: TextStyle(\n                fontSize: 16,\n              ),\n            ),\n            Text(\n              \"=> If you opt to be absent in a meal and then do not attend the meal, then you will not be charged for that.\\n\",\n              style: TextStyle(\n                fontSize: 16,\n              ),\n            ),\n            Text(\n              \"=> But... there's always a but... If you opt to be absent but attend the meal regardless, you will be charged and fined 10/-\\n\",\n              style: TextStyle(\n                fontSize: 16,\n              ),\n            ),\n            Text(\n              \"=> You can see your weekly and daily expenditures in the dashboard\\n\",\n              style: TextStyle(\n                fontSize: 16,\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
      },
      {
        "name": "deleteUser.dart",
        "path": "lib/screens/deleteUser.dart",
        "type": "blob",
        "content": "import 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:project02_hackloop/utils/color.dart';\nimport 'package:project02_hackloop/widgets/reusable.dart';\n\nclass deleteUser extends StatefulWidget {\n  const deleteUser({super.key});\n\n  @override\n  State<deleteUser> createState() => _deleteUserState();\n}\n\nclass _deleteUserState extends State<deleteUser> {\n  Future<void> unmakeUser(String email, String password) async {\n    try {\n      await FirebaseAuth.instance\n          .signInWithEmailAndPassword(email: email, password: password);\n      FirebaseAuth.instance.currentUser!.delete();\n      FirebaseAuth.instance.signInWithEmailAndPassword(\n          email: \"meals.admn@gmail.com\", password: \"mealsappadmin\");\n    } catch (e) {\n      print(e);\n    }\n  }\n\n  TextEditingController _emailTextController = TextEditingController();\n  TextEditingController _passwordTextController = TextEditingController();\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        body: Container(\n            width: MediaQuery.of(context).size.width,\n            height: MediaQuery.of(context).size.height,\n            decoration: BoxDecoration(\n              gradient: LinearGradient(\n                colors: [toColor(\"BB1009\"), toColor(\"610000\")],\n                begin: Alignment.topCenter,\n                end: Alignment.bottomCenter,\n              ),\n            ),\n            child: SingleChildScrollView(\n                child: Column(children: <Widget>[\n              SizedBox(\n                height: 100,\n              ),\n              logoWidget(\"assets/logo/meals_large.png\", 240, 160),\n              Padding(\n                padding: const EdgeInsets.fromLTRB(40, 0, 40, 25),\n                child: Divider(\n                  color: toColor(\"d4d4d4\"),\n                  thickness: 2,\n                ),\n              ),\n              SizedBox(\n                height: 10,\n              ),\n              Padding(\n                padding: const EdgeInsets.fromLTRB(40, 0, 40, 10),\n                child: reusableTextField(\n                    \"Email\", Icons.person_outline, false, _emailTextController),\n              ),\n              Padding(\n                padding: const EdgeInsets.fromLTRB(40, 0, 40, 10),\n                child: reusableTextField(\"Password\", Icons.lock_outlined, true,\n                    _passwordTextController),\n              ),\n              Padding(\n                  padding: const EdgeInsets.fromLTRB(40, 10, 40, 10),\n                  child: uiButton(context, \"Delete User\", () {\n                    unmakeUser(_emailTextController.text,\n                        _passwordTextController.text);\n                  })),\n              Padding(\n                padding: const EdgeInsets.fromLTRB(40, 0, 40, 25),\n                child: Divider(\n                  color: toColor(\"d4d4d4\"),\n                  thickness: 2,\n                ),\n              ),\n            ]))));\n  }\n}\n"
      },
      {
        "name": "indivisualBar.dart",
        "path": "lib/graph/indivisualBar.dart",
        "type": "blob",
        "content": "class indivisualBar {\n  final int x;\n  final double y;\n\n  indivisualBar({required this.x, required this.y});\n}\n"
      },
      {
        "name": "navig.dart",
        "path": "lib/screens/navig.dart",
        "type": "blob",
        "content": "import 'package:flutter/material.dart';\nimport 'package:project02_hackloop/admins/adminHome.dart';\nimport 'package:project02_hackloop/screens/dashboard.dart';\nimport 'package:project02_hackloop/screens/home.dart';\nimport 'package:project02_hackloop/screens/user.dart';\nimport 'package:project02_hackloop/utils/color.dart';\nimport 'package:google_nav_bar/google_nav_bar.dart';\nimport 'package:project02_hackloop/widgets/reusable.dart';\n\nclass navigation extends StatefulWidget {\n  const navigation({super.key});\n\n  @override\n  State<navigation> createState() {\n    return _navigationState();\n  }\n}\n\nclass _navigationState extends State<navigation> {\n  int _selectedIndex = 0;\n  static List<Widget> _pages = [HomeScreen(), dash(), usercenter()];\n  void _onItemTapped(int index) {\n    setState(() {\n      _selectedIndex = index;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    double pad = MediaQuery.of(context).size.width / 2 - 160;\n    if (pad <= 20) {\n      pad = 20;\n    }\n    return Scaffold(\n        body: Center(\n          child: _pages.elementAt(_selectedIndex),\n        ),\n        bottomNavigationBar: Container(\n          color: toColor(\"540000\"),\n          child: Padding(\n            padding: EdgeInsets.fromLTRB(pad, 10, pad, 10),\n            child: GNav(\n              gap: 8,\n              tabs: [\n                GButton(\n                  icon: Icons.fastfood,\n                  text: 'meals.',\n                ),\n                GButton(\n                  icon: Icons.dashboard_rounded,\n                  text: 'Dashboard',\n                ),\n                GButton(\n                  icon: Icons.settings,\n                  text: 'User Settings',\n                ),\n              ],\n              backgroundColor: toColor(\"540000\"),\n              color: toColor(\"806060\"),\n              activeColor: toColor(\"d4d4d4\"),\n              padding: EdgeInsets.all(16),\n              tabBackgroundGradient: LinearGradient(\n                  colors: [toColor(\"640000\"), toColor(\"820000\")]),\n              haptic: true,\n              onTabChange: _onItemTapped,\n            ),\n          ),\n        ));\n  }\n}\n"
      },
      {
        "name": "signup.dart",
        "path": "lib/screens/signup.dart",
        "type": "blob",
        "content": "import 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:project02_hackloop/main.dart';\nimport 'package:project02_hackloop/utils/color.dart';\nimport 'package:project02_hackloop/widgets/reusable.dart';\n\nclass signup extends StatefulWidget {\n  const signup({super.key});\n\n  @override\n  State<signup> createState() => _signupState();\n}\n\nclass _signupState extends State<signup> {\n  TextEditingController _passwordTextController = TextEditingController();\n  TextEditingController _emailTextController = TextEditingController();\n\n  Future<void> makeUser(String email, String password) async {\n    try {\n      await FirebaseAuth.instance\n          .createUserWithEmailAndPassword(email: email, password: password);\n      print(getUsername());\n      await createDocumentWithId(\"attendance\", email.substring(0, 10), {\n        \"breakfast\": false,\n        \"lunch\": false,\n        \"snacks\": false,\n        \"dinner\": false,\n      });\n      await createDocumentWithId(\"choice\", email.substring(0, 10), {\n        \"breakfast\": true,\n        \"lunch\": true,\n        \"snacks\": true,\n        \"dinner\": true,\n      });\n      await createDocumentWithId(\"fees\", \"daily\", {\n        \"${email.substring(0, 10)}\": \"0000000000000000000000000000000\",\n      });\n      await createDocumentWithId(\"fees\", \"daily\", {\n        \"${email.substring(0, 10)}\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      });\n      FirebaseAuth.instance.signOut();\n      FirebaseAuth.instance.signInWithEmailAndPassword(\n          email: \"meals.admn@gmail.com\", password: \"mealsappadmin\");\n      showDialog(\n          context: context,\n          builder: (context) => alertMe(\n              context,\n              \"User Creation Success\",\n              [\n                TextButton(\n                    onPressed: () {\n                      Navigator.of(context).pop();\n                    },\n                    child: Text(\"Ok\"))\n              ],\n              Text(\"User Created\")));\n    } catch (e) {\n      showDialog(\n          context: context,\n          builder: (context) => alertMe(\n              context,\n              \"User Creation Error\",\n              [\n                TextButton(\n                    onPressed: () {\n                      Navigator.of(context).pop();\n                    },\n                    child: Text(\"Ok\"))\n              ],\n              Text(\"$e\")));\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        body: Container(\n            width: MediaQuery.of(context).size.width,\n            height: MediaQuery.of(context).size.height,\n            decoration: BoxDecoration(\n              gradient: LinearGradient(\n                colors: [toColor(\"BB1009\"), toColor(\"610000\")],\n                begin: Alignment.topCenter,\n                end: Alignment.bottomCenter,\n              ),\n            ),\n            child: SingleChildScrollView(\n                child: Column(children: <Widget>[\n              SizedBox(\n                height: 100,\n              ),\n              logoWidget(\"assets/logo/meals_large.png\", 240, 160),\n              Padding(\n                padding: const EdgeInsets.fromLTRB(40, 0, 40, 25),\n                child: Divider(\n                  color: toColor(\"d4d4d4\"),\n                  thickness: 2,\n                ),\n              ),\n              SizedBox(\n                height: 10,\n              ),\n              Padding(\n                padding: const EdgeInsets.fromLTRB(40, 0, 40, 10),\n                child: reusableTextField(\n                    \"Email\", Icons.person_outline, false, _emailTextController),\n              ),\n              Padding(\n                padding: const EdgeInsets.fromLTRB(40, 0, 40, 10),\n                child: reusableTextField(\"Password\", Icons.lock_outlined, true,\n                    _passwordTextController),\n              ),\n              Padding(\n                padding: const EdgeInsets.fromLTRB(40, 10, 40, 10),\n                child: uiButton(context, \"Sign Up\", () {\n                  makeUser(\n                      _emailTextController.text, _passwordTextController.text);\n                }),\n              ),\n              Padding(\n                padding: const EdgeInsets.fromLTRB(40, 0, 40, 25),\n                child: Divider(\n                  color: toColor(\"d4d4d4\"),\n                  thickness: 2,\n                ),\n              ),\n            ]))));\n  }\n}\n"
      },
      {
        "name": "color.dart",
        "path": "lib/utils/color.dart",
        "type": "blob",
        "content": "import 'package:flutter/material.dart';\n\ntoColor(String hexColor) {\n  hexColor = hexColor.toUpperCase().replaceAll(\"#\", \"\");\n  if (hexColor.length == 6) {\n    hexColor = \"FF\" + hexColor;\n  }\n  return Color(int.parse(hexColor, radix: 16));\n}\n"
      },
      {
        "name": "time.dart",
        "path": "lib/utils/time.dart",
        "type": "blob",
        "content": "import 'package:ntp/ntp.dart';\n\nString tomdate() {\n  DateTime internetTime = DateTime.now();\n\n  NTP\n      .getNtpOffset(localTime: DateTime.now(), lookUpAddress: \"time.google.com\")\n      .then((offset) {\n    internetTime = DateTime.now().add(Duration(milliseconds: offset));\n  });\n\n  DateTime today = internetTime;\n\n  String date = today.day.toString().padLeft(2, '0') +\n      \"/\" +\n      today.month.toString().padLeft(2, '0');\n\n  return date;\n}\n\nint hournow() {\n  DateTime internetTime = DateTime.now();\n\n  NTP\n      .getNtpOffset(localTime: DateTime.now(), lookUpAddress: \"time.google.com\")\n      .then((offset) {\n    internetTime = DateTime.now().add(Duration(milliseconds: offset));\n  });\n\n  DateTime today = internetTime;\n\n  int hour = today.hour;\n\n  return hour;\n}\n\nint pastDate(int past) {\n  DateTime internetTime = DateTime.now();\n\n  NTP\n      .getNtpOffset(localTime: DateTime.now(), lookUpAddress: \"time.google.com\")\n      .then((offset) {\n    internetTime = DateTime.now().add(Duration(milliseconds: offset));\n  });\n\n  internetTime = internetTime.subtract(Duration(days: past));\n  int date = internetTime.day;\n  return date;\n}\n\nint thisMonth() {\n  DateTime internetTime = DateTime.now();\n\n  NTP\n      .getNtpOffset(localTime: DateTime.now(), lookUpAddress: \"time.google.com\")\n      .then((offset) {\n    internetTime = DateTime.now().add(Duration(milliseconds: offset));\n  });\n  int mon = internetTime.month;\n  return mon;\n}\n"
      },
      {
        "name": "reusable.dart",
        "path": "lib/widgets/reusable.dart",
        "type": "blob",
        "content": "import 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_storage/firebase_storage.dart';\nimport 'package:qr_flutter/qr_flutter.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_animate/flutter_animate.dart';\nimport 'package:project02_hackloop/utils/color.dart';\n\nImage logoWidget(String imageName, double x, double y) {\n  return Image.asset(\n    imageName,\n    fit: BoxFit.fitWidth,\n    width: x,\n    height: y,\n    color: toColor(\"d4d4d4\"),\n  );\n}\n\nTextField reusableTextField(String text, IconData icon, bool isPasswordType,\n    TextEditingController controller) {\n  return TextField(\n    controller: controller,\n    obscureText: isPasswordType,\n    enableSuggestions: !isPasswordType,\n    autocorrect: !isPasswordType,\n    cursorColor: Colors.white.withOpacity(0.9),\n    cursorWidth: 2,\n    cursorHeight: 20,\n    style: TextStyle(color: Colors.white.withOpacity(0.9)),\n    decoration: InputDecoration(\n      prefixIcon: Icon(\n        icon,\n        color: Colors.white70,\n      ),\n      labelText: text,\n      labelStyle: TextStyle(\n          color: Colors.white.withOpacity(0.6),\n          fontWeight: FontWeight.bold,\n          fontSize: 16),\n      filled: true,\n      floatingLabelBehavior: FloatingLabelBehavior.never,\n      fillColor: Colors.black.withOpacity(0.1),\n      border: OutlineInputBorder(\n          borderRadius: BorderRadius.circular(10.0),\n          borderSide: const BorderSide(width: 0, style: BorderStyle.none)),\n    ),\n    keyboardType: isPasswordType\n        ? TextInputType.visiblePassword\n        : TextInputType.emailAddress,\n  );\n}\n\nImage ImageWidget(String imageName, double x, double y) {\n  return Image.asset(\n    imageName,\n    fit: BoxFit.fitWidth,\n    width: x,\n    height: y,\n  );\n}\n\nContainer uiButton(BuildContext context, String title, Function onTap) {\n  return Container(\n    width: 500,\n    height: 50,\n    margin: const EdgeInsets.fromLTRB(30, 10, 30, 20),\n    decoration: BoxDecoration(borderRadius: BorderRadius.circular(90)),\n    child: ElevatedButton(\n      onPressed: () {\n        onTap();\n      },\n      style: ButtonStyle(\n          backgroundColor: MaterialStateProperty.resolveWith((states) {\n            if (states.contains(MaterialState.pressed)) {\n              return Color.fromARGB(255, 214, 214, 214);\n            }\n            return Color.fromARGB(255, 212, 212, 212);\n          }),\n          shape: MaterialStateProperty.all<RoundedRectangleBorder>(\n              RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)))),\n      child: Text(\n        title,\n        style: const TextStyle(\n            color: Colors.black87, fontWeight: FontWeight.bold, fontSize: 16),\n      ),\n    ),\n  );\n}\n\nclass ParentWidget extends StatefulWidget {\n  @override\n  _ParentWidgetState createState() => _ParentWidgetState();\n}\n\nclass _ParentWidgetState extends State<ParentWidget> {\n  bool isThumbsUp = true;\n\n  void toggleThumbsUp() {\n    setState(() {\n      isThumbsUp = !isThumbsUp;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return newcard(context, 'Title', toggleThumbsUp);\n  }\n}\n\nContainer newcard(BuildContext context, String title, Function onTap,\n    {bool isThumbsUp = false}) {\n  return Container(\n    width: MediaQuery.of(context).size.width * 0.85,\n    child: Card(\n      elevation: 10,\n      shape: RoundedRectangleBorder(\n        borderRadius: BorderRadius.circular(16),\n      ),\n      color: toColor(\"d4d4d4\"),\n      child: SingleChildScrollView(\n        scrollDirection: Axis.horizontal,\n        child: Padding(\n          padding: const EdgeInsets.all(28),\n          child: Row(\n            mainAxisSize: MainAxisSize.max,\n            children: <Widget>[\n              Text(\n                \"$title\",\n                style: TextStyle(color: toColor(\"111111\"), fontSize: 20),\n              ),\n              IconButton(\n                onPressed: () => onTap(),\n                icon: Icon(\n                  isThumbsUp\n                      ? Icons.thumb_up\n                      : Icons\n                          .thumb_down_alt_outlined, // Change icon based on state\n                  size: 22,\n                  color: isThumbsUp\n                      ? Color(0xFF16A349)\n                      : Color.fromARGB(\n                          244, 150, 36, 36), // Change color based on state\n                ),\n              )\n            ],\n          ),\n        ),\n      ),\n    ),\n  );\n}\n\nfadeMeIn(Widget wid, double delay) {\n  return Animate(\n    effects: [FadeEffect(delay: delay.ms, begin: 0)],\n    child: wid,\n  );\n}\n\nWidget buildImage(String imageUrl) {\n  return Image.network(imageUrl, width: 200, height: 200, fit: BoxFit.cover);\n}\n\ngetUsername() {\n  FirebaseAuth auth = FirebaseAuth.instance;\n  User? currentUser = auth.currentUser;\n  String username = currentUser?.email ?? 'Login Error';\n  username = username.substring(0, 10);\n  return username;\n}\n\nAlertDialog alertMe(BuildContext context, String title, actions, contents) {\n  return AlertDialog(\n    actions: actions,\n    contentPadding: EdgeInsets.all(20),\n    content: contents,\n    title: Text(title),\n  );\n}\n\nQrImageView genQR(String data) {\n  return QrImageView(\n    data: data,\n    version: QrVersions.auto,\n    size: 120.0,\n    gapless: false,\n    backgroundColor: Colors.white.withOpacity(0.1),\n    eyeStyle: QrEyeStyle(eyeShape: QrEyeShape.square, color: toColor(\"d4d4d4\")),\n    dataModuleStyle: QrDataModuleStyle(\n        dataModuleShape: QrDataModuleShape.circle, color: toColor(\"d4d4d4\")),\n    errorStateBuilder: (context, error) {\n      return Center(\n        child: Text(\n          'Error: $error',\n          style: TextStyle(fontSize: 18),\n        ),\n      );\n    },\n  );\n}\n\nclass DownloadAndDisplayImage extends StatefulWidget {\n  @override\n  _DownloadAndDisplayImageState createState() =>\n      _DownloadAndDisplayImageState();\n}\n\nclass _DownloadAndDisplayImageState extends State<DownloadAndDisplayImage> {\n  String username = getUsername();\n  final FirebaseStorage storage = FirebaseStorage.instance;\n  String? imageUrl;\n\n  @override\n  void initState() {\n    super.initState();\n    downloadImage();\n  }\n\n  Future<void> downloadImage() async {\n    try {\n      final Reference imageRef =\n          await storage.ref().child('userprof/$username.jpg');\n      final String url = await imageRef.getDownloadURL();\n      setState(() {\n        imageUrl = url;\n      });\n    } on FirebaseException catch (e) {\n      print(\"exception $e\");\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (imageUrl != null) {\n      return ClipRRect(\n        child: Image.network(\n          imageUrl!,\n          width: 200,\n          height: 200,\n        ),\n        borderRadius: BorderRadius.all(Radius.circular(30)),\n      );\n    } else {\n      return ClipRRect(\n        child: Image.asset(\n          \"assets/images/user.jpg\",\n          fit: BoxFit.fitWidth,\n          width: 200,\n          height: 200,\n        ),\n        borderRadius: BorderRadius.all(Radius.circular(30)),\n      );\n    }\n  }\n}\n\nint convToExpence(String a) {\n  int num1 = 0;\n  try {\n    num1 = int.parse(a);\n  } catch (e) {\n    a = a.toLowerCase();\n    num1 = a.codeUnitAt(0) - 87;\n  }\n  return num1 * 10;\n}\n\nCard expenceCard(\n  BuildContext context,\n  String title,\n) {\n  return Card(\n      elevation: 5,\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),\n      color: toColor(\"d4d4d4\"),\n      child: Container(\n        width: MediaQuery.of(context).size.width / 2 - 45,\n        child: Padding(\n          padding: EdgeInsets.fromLTRB(20, 20, 20, 20),\n          child: Text(\n            title,\n            style: TextStyle(\n                color: toColor(\"666666\"),\n                fontWeight: FontWeight.bold,\n                fontSize: 18),\n          ),\n        ),\n      ));\n}\n\nCard inputCard(String title, Function onTap, TextEditingController controller,\n    String meal) {\n  return Card(\n    color: Colors.black.withOpacity(0.1),\n    elevation: 0,\n    shape: RoundedRectangleBorder(\n      borderRadius: BorderRadius.circular(16.0),\n    ),\n    child: Padding(\n      padding: EdgeInsets.all(8.0),\n      child: Column(\n        children: [\n          Row(\n            children: [\n              Expanded(\n                child: Container(\n                  child: TextField(\n                    controller: controller,\n                    cursorColor: toColor(\"d4d4d4\"),\n                    style: TextStyle(color: toColor(\"d4d4d4\")),\n                    decoration: InputDecoration(\n                      filled: true,\n                      fillColor: Colors.black.withOpacity(0.05),\n                      labelStyle: TextStyle(color: toColor(\"d4d4d4\")),\n                      labelText: \"$title: $meal\",\n                      border: OutlineInputBorder(\n                        borderRadius: BorderRadius.circular(10),\n                      ),\n                      focusedBorder: InputBorder.none,\n                      enabledBorder: OutlineInputBorder(\n                          borderSide: BorderSide(\n                              width: 0, color: Colors.black.withOpacity(0.05)),\n                          borderRadius: BorderRadius.circular(10)),\n                    ),\n                    onSubmitted: (str) {\n                      if (str != '') {\n                        onTap();\n                        controller.clear();\n                      }\n                    },\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ],\n      ),\n    ),\n  );\n}\n\nString convHrToMeal(int hr) {\n  if (hr < 11) {\n    return \"breakfast\";\n  } else if (hr < 16) {\n    return \"lunch\";\n  } else if (hr < 19) {\n    return \"snacks\";\n  } else {\n    return \"dinner\";\n  }\n}\n"
      },
      {
        "name": "user.dart",
        "path": "lib/screens/user.dart",
        "type": "blob",
        "content": "import 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:project02_hackloop/screens/info.dart';\nimport 'package:project02_hackloop/screens/signin.dart';\nimport 'package:project02_hackloop/utils/color.dart';\nimport 'package:project02_hackloop/utils/time.dart';\nimport 'package:project02_hackloop/widgets/reusable.dart';\n\nclass usercenter extends StatefulWidget {\n  const usercenter({Key? key}) : super(key: key);\n\n  @override\n  _usercenterState createState() => _usercenterState();\n}\n\nclass _usercenterState extends State<usercenter> {\n  @override\n  Widget build(BuildContext context) {\n    String username = getUsername();\n    double len = MediaQuery.of(context).size.height - 720;\n    if (len <= 100) {\n      len = 100;\n    }\n    String qrdata = getUsername() + hournow().toString() + tomdate();\n    return Scaffold(\n      body: Container(\n          width: MediaQuery.of(context).size.width,\n          height: MediaQuery.of(context).size.height,\n          decoration: BoxDecoration(\n              gradient: LinearGradient(\n            colors: [toColor(\"BB1009\"), toColor(\"610000\")],\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n          )),\n          child: SingleChildScrollView(\n              child: Padding(\n            padding: const EdgeInsets.fromLTRB(20, 0, 20, 20),\n            child: Column(children: <Widget>[\n              Padding(\n                  padding: EdgeInsets.fromLTRB(10, 50, 10, 0),\n                  child: DownloadAndDisplayImage()),\n              Padding(\n                  padding: EdgeInsets.fromLTRB(10, 30, 10, 0),\n                  child: fadeMeIn(\n                      Text(\"$username\",\n                          style: TextStyle(\n                              color: toColor(\"d4d4d4\"),\n                              fontSize: 30,\n                              fontWeight: FontWeight.bold)),\n                      0)),\n              Padding(\n                  padding: EdgeInsets.fromLTRB(10, 10, 10, 20),\n                  child: fadeMeIn(\n                      Text(\n                        \"(Contact admin for User Credentials)\",\n                        style: TextStyle(\n                            color: toColor(\"d4d4d4\"),\n                            fontSize: 18,\n                            fontWeight: FontWeight.bold),\n                        textAlign: TextAlign.center,\n                      ),\n                      50)),\n              fadeMeIn(genQR(qrdata), 100),\n              SizedBox(height: len),\n              fadeMeIn(\n                  uiButton(context, \"Logout\", () async {\n                    await FirebaseAuth.instance.signOut().then((value) =>\n                        Navigator.pushAndRemoveUntil(\n                            context,\n                            MaterialPageRoute(builder: (context) => SignIn()),\n                            (Route<dynamic> route) => false));\n                  }),\n                  100),\n              Padding(\n                  padding: EdgeInsets.fromLTRB(10, 0, 10, 0),\n                  child: fadeMeIn(\n                      TextButton(\n                          onPressed: () {\n                            Navigator.push(\n                              context,\n                              MaterialPageRoute(\n                                  builder: (context) => infoscreen()),\n                            );\n                          },\n                          child: Text(\n                            \"M.E.A.L.S.(Meal Efficiency & Automated Logistics System)\",\n                            style: TextStyle(\n                                color: toColor(\"d4d4d4\"), fontSize: 12),\n                            textAlign: TextAlign.center,\n                          )),\n                      150)),\n            ]),\n          ))),\n    );\n  }\n}\n"
      },
      {
        "name": "CMakeLists.txt",
        "path": "linux/CMakeLists.txt",
        "type": "blob",
        "content": "# Project-level configuration.\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"project02_hackloop\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.project02_hackloop\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n\n\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n"
      },
      {
        "name": "generated_plugin_registrant.h",
        "path": "linux/flutter/generated_plugin_registrant.h",
        "type": "blob",
        "content": "//\n//  Generated file. Do not edit.\n//\n\n// clang-format off\n\n#ifndef GENERATED_PLUGIN_REGISTRANT_\n#define GENERATED_PLUGIN_REGISTRANT_\n\n#include <flutter_linux/flutter_linux.h>\n\n// Registers Flutter plugins.\nvoid fl_register_plugins(FlPluginRegistry* registry);\n\n#endif  // GENERATED_PLUGIN_REGISTRANT_\n"
      },
      {
        "name": "my_application.h",
        "path": "linux/my_application.h",
        "type": "blob",
        "content": "#ifndef FLUTTER_MY_APPLICATION_H_\n#define FLUTTER_MY_APPLICATION_H_\n\n#include <gtk/gtk.h>\n\nG_DECLARE_FINAL_TYPE(MyApplication, my_application, MY, APPLICATION,\n                     GtkApplication)\n\n/**\n * my_application_new:\n *\n * Creates a new Flutter-based application.\n *\n * Returns: a new #MyApplication.\n */\nMyApplication* my_application_new();\n\n#endif  // FLUTTER_MY_APPLICATION_H_\n"
      },
      {
        "name": "AppDelegate.swift",
        "path": "macos/Runner/AppDelegate.swift",
        "type": "blob",
        "content": "import Cocoa\nimport FlutterMacOS\n\n@NSApplicationMain\nclass AppDelegate: FlutterAppDelegate {\n  override func applicationShouldTerminateAfterLastWindowClosed(_ sender: NSApplication) -> Bool {\n    return true\n  }\n}\n"
      },
      {
        "name": "GeneratedPluginRegistrant.swift",
        "path": "macos/Flutter/GeneratedPluginRegistrant.swift",
        "type": "blob",
        "content": "//\n//  Generated file. Do not edit.\n//\n\nimport FlutterMacOS\nimport Foundation\n\nimport cloud_firestore\nimport connectivity_plus\nimport file_selector_macos\nimport firebase_auth\nimport firebase_core\nimport firebase_storage\nimport path_provider_foundation\n\nfunc RegisterGeneratedPlugins(registry: FlutterPluginRegistry) {\n  FLTFirebaseFirestorePlugin.register(with: registry.registrar(forPlugin: \"FLTFirebaseFirestorePlugin\"))\n  ConnectivityPlugin.register(with: registry.registrar(forPlugin: \"ConnectivityPlugin\"))\n  FileSelectorPlugin.register(with: registry.registrar(forPlugin: \"FileSelectorPlugin\"))\n  FLTFirebaseAuthPlugin.register(with: registry.registrar(forPlugin: \"FLTFirebaseAuthPlugin\"))\n  FLTFirebaseCorePlugin.register(with: registry.registrar(forPlugin: \"FLTFirebaseCorePlugin\"))\n  FLTFirebaseStoragePlugin.register(with: registry.registrar(forPlugin: \"FLTFirebaseStoragePlugin\"))\n  PathProviderPlugin.register(with: registry.registrar(forPlugin: \"PathProviderPlugin\"))\n}\n"
      },
      {
        "name": "MainFlutterWindow.swift",
        "path": "macos/Runner/MainFlutterWindow.swift",
        "type": "blob",
        "content": "import Cocoa\nimport FlutterMacOS\n\nclass MainFlutterWindow: NSWindow {\n  override func awakeFromNib() {\n    let flutterViewController = FlutterViewController()\n    let windowFrame = self.frame\n    self.contentViewController = flutterViewController\n    self.setFrame(windowFrame, display: true)\n\n    RegisterGeneratedPlugins(registry: flutterViewController)\n\n    super.awakeFromNib()\n  }\n}\n"
      },
      {
        "name": "pubspec.yaml",
        "path": "pubspec.yaml",
        "type": "blob",
        "content": "name: project02_hackloop\ndescription: \"A new Flutter project.\"\npublish_to: 'none'\nversion: 0.1.0\n\nenvironment:\n  sdk: '>=3.2.5 <4.0.0'\n\ndependencies:\n  cloud_firestore: ^4.15.3\n  connectivity_plus: ^3.0.2\n  firebase_auth: ^4.17.0\n  firebase_core: ^2.25.0\n  firebase_storage: ^11.6.4\n  flutter:\n    sdk: flutter\n  flutter_animate: ^4.5.0\n  google_fonts: ^6.1.0\n  ntp: ^2.0.0\n  flutter_native_splash: ^2.3.10\n  google_nav_bar: ^5.0.6\n  qr_flutter: ^4.1.0\n  fl_chart: ^0.66.2\n  image_picker: ^1.0.7\n  qr_code_dart_scan: ^0.7.5\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n\nflutter:\n  uses-material-design: true\n  assets:\n    - assets/images/\n    - assets/logo/\n\nflutter_native_splash:\n  color: \"#BB1009\"\n  color_dark: \"#BB1009\"\n  image: assets\\logo\\meals_large.png\n  image_dark: assets\\logo\\meals_large.png\n  \n  android_12:\n    color: \"#BB1009\"\n    image: C:\\Programming\\Flutter\\meals\\assets\\logo\\meals_large.png\n  web: false"
      },
      {
        "name": "index.html",
        "path": "web/index.html",
        "type": "blob",
        "content": "<!DOCTYPE html>\n<html>\n<head>\n  <!--\n    If you are serving your web app in a path other than the root, change the\n    href value below to reflect the base path you are serving from.\n\n    The path provided below has to start and end with a slash \"/\" in order for\n    it to work correctly.\n\n    For more details:\n    * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base\n\n    This is a placeholder for base href that will be replaced by the value of\n    the `--base-href` argument provided to `flutter build`.\n  -->\n  <base href=\"$FLUTTER_BASE_HREF\">\n\n  <meta charset=\"UTF-8\">\n  <meta content=\"IE=Edge\" http-equiv=\"X-UA-Compatible\">\n  <meta name=\"description\" content=\"A new Flutter project.\">\n\n  <!-- iOS meta tags & icons -->\n  <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n  <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\">\n  <meta name=\"apple-mobile-web-app-title\" content=\"project02_hackloop\">\n  <link rel=\"apple-touch-icon\" href=\"icons/Icon-192.png\">\n\n  <!-- Favicon -->\n  <link rel=\"icon\" type=\"image/png\" href=\"favicon.png\"/>\n\n  <title>project02_hackloop</title>\n  <link rel=\"manifest\" href=\"manifest.json\">\n\n  <script>\n    // The value below is injected by flutter build, do not touch.\n    const serviceWorkerVersion = null;\n  </script>\n  <!-- This script adds the flutter initialization JS code -->\n  <script src=\"flutter.js\" defer></script>\n</head>\n<body>\n  <script>\n    window.addEventListener('load', function(ev) {\n      // Download main.dart.js\n      _flutter.loader.loadEntrypoint({\n        serviceWorker: {\n          serviceWorkerVersion: serviceWorkerVersion,\n        },\n        onEntrypointLoaded: function(engineInitializer) {\n          engineInitializer.initializeEngine().then(function(appRunner) {\n            appRunner.runApp();\n          });\n        }\n      });\n    });\n  </script>\n</body>\n</html>\n"
      },
      {
        "name": "RunnerTests.swift",
        "path": "macos/RunnerTests/RunnerTests.swift",
        "type": "blob",
        "content": "import FlutterMacOS\nimport Cocoa\nimport XCTest\n\nclass RunnerTests: XCTestCase {\n\n  func testExample() {\n    // If you add code to the Runner application, consider adding tests here.\n    // See https://developer.apple.com/documentation/xctest for more information about using XCTest.\n  }\n\n}\n"
      },
      {
        "name": "manifest.json",
        "path": "web/manifest.json",
        "type": "blob",
        "content": "{\n    \"name\": \"project02_hackloop\",\n    \"short_name\": \"project02_hackloop\",\n    \"start_url\": \".\",\n    \"display\": \"standalone\",\n    \"background_color\": \"#0175C2\",\n    \"theme_color\": \"#0175C2\",\n    \"description\": \"A new Flutter project.\",\n    \"orientation\": \"portrait-primary\",\n    \"prefer_related_applications\": false,\n    \"icons\": [\n        {\n            \"src\": \"icons/Icon-192.png\",\n            \"sizes\": \"192x192\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"icons/Icon-512.png\",\n            \"sizes\": \"512x512\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"icons/Icon-maskable-192.png\",\n            \"sizes\": \"192x192\",\n            \"type\": \"image/png\",\n            \"purpose\": \"maskable\"\n        },\n        {\n            \"src\": \"icons/Icon-maskable-512.png\",\n            \"sizes\": \"512x512\",\n            \"type\": \"image/png\",\n            \"purpose\": \"maskable\"\n        }\n    ]\n}\n"
      },
      {
        "name": "generated_plugin_registrant.h",
        "path": "windows/flutter/generated_plugin_registrant.h",
        "type": "blob",
        "content": "//\n//  Generated file. Do not edit.\n//\n\n// clang-format off\n\n#ifndef GENERATED_PLUGIN_REGISTRANT_\n#define GENERATED_PLUGIN_REGISTRANT_\n\n#include <flutter/plugin_registry.h>\n\n// Registers Flutter plugins.\nvoid RegisterPlugins(flutter::PluginRegistry* registry);\n\n#endif  // GENERATED_PLUGIN_REGISTRANT_\n"
      },
      {
        "name": "CMakeLists.txt",
        "path": "windows/CMakeLists.txt",
        "type": "blob",
        "content": "# Project-level configuration.\ncmake_minimum_required(VERSION 3.14)\nproject(project02_hackloop LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"project02_hackloop\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(VERSION 3.14...3.25)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n\n\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n"
      },
      {
        "name": "flutter_window.cpp",
        "path": "windows/runner/flutter_window.cpp",
        "type": "blob",
        "content": "#include \"flutter_window.h\"\n\n#include <optional>\n\n#include \"flutter/generated_plugin_registrant.h\"\n\nFlutterWindow::FlutterWindow(const flutter::DartProject& project)\n    : project_(project) {}\n\nFlutterWindow::~FlutterWindow() {}\n\nbool FlutterWindow::OnCreate() {\n  if (!Win32Window::OnCreate()) {\n    return false;\n  }\n\n  RECT frame = GetClientArea();\n\n  // The size here must match the window dimensions to avoid unnecessary surface\n  // creation / destruction in the startup path.\n  flutter_controller_ = std::make_unique<flutter::FlutterViewController>(\n      frame.right - frame.left, frame.bottom - frame.top, project_);\n  // Ensure that basic setup of the controller was successful.\n  if (!flutter_controller_->engine() || !flutter_controller_->view()) {\n    return false;\n  }\n  RegisterPlugins(flutter_controller_->engine());\n  SetChildContent(flutter_controller_->view()->GetNativeWindow());\n\n  flutter_controller_->engine()->SetNextFrameCallback([&]() {\n    this->Show();\n  });\n\n  // Flutter can complete the first frame before the \"show window\" callback is\n  // registered. The following call ensures a frame is pending to ensure the\n  // window is shown. It is a no-op if the first frame hasn't completed yet.\n  flutter_controller_->ForceRedraw();\n\n  return true;\n}\n\nvoid FlutterWindow::OnDestroy() {\n  if (flutter_controller_) {\n    flutter_controller_ = nullptr;\n  }\n\n  Win32Window::OnDestroy();\n}\n\nLRESULT\nFlutterWindow::MessageHandler(HWND hwnd, UINT const message,\n                              WPARAM const wparam,\n                              LPARAM const lparam) noexcept {\n  // Give Flutter, including plugins, an opportunity to handle window messages.\n  if (flutter_controller_) {\n    std::optional<LRESULT> result =\n        flutter_controller_->HandleTopLevelWindowProc(hwnd, message, wparam,\n                                                      lparam);\n    if (result) {\n      return *result;\n    }\n  }\n\n  switch (message) {\n    case WM_FONTCHANGE:\n      flutter_controller_->engine()->ReloadSystemFonts();\n      break;\n  }\n\n  return Win32Window::MessageHandler(hwnd, message, wparam, lparam);\n}\n"
      },
      {
        "name": "CMakeLists.txt",
        "path": "windows/runner/CMakeLists.txt",
        "type": "blob",
        "content": "cmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n"
      },
      {
        "name": "resource.h",
        "path": "windows/runner/resource.h",
        "type": "blob",
        "content": "//{{NO_DEPENDENCIES}}\n// Microsoft Visual C++ generated include file.\n// Used by Runner.rc\n//\n#define IDI_APP_ICON                    101\n\n// Next default values for new objects\n//\n#ifdef APSTUDIO_INVOKED\n#ifndef APSTUDIO_READONLY_SYMBOLS\n#define _APS_NEXT_RESOURCE_VALUE        102\n#define _APS_NEXT_COMMAND_VALUE         40001\n#define _APS_NEXT_CONTROL_VALUE         1001\n#define _APS_NEXT_SYMED_VALUE           101\n#endif\n#endif\n"
      },
      {
        "name": "utils.h",
        "path": "windows/runner/utils.h",
        "type": "blob",
        "content": "#ifndef RUNNER_UTILS_H_\n#define RUNNER_UTILS_H_\n\n#include <string>\n#include <vector>\n\n// Creates a console for the process, and redirects stdout and stderr to\n// it for both the runner and the Flutter library.\nvoid CreateAndAttachConsole();\n\n// Takes a null-terminated wchar_t* encoded in UTF-16 and returns a std::string\n// encoded in UTF-8. Returns an empty std::string on failure.\nstd::string Utf8FromUtf16(const wchar_t* utf16_string);\n\n// Gets the command line arguments passed in as a std::vector<std::string>,\n// encoded in UTF-8. Returns an empty std::vector<std::string> on failure.\nstd::vector<std::string> GetCommandLineArguments();\n\n#endif  // RUNNER_UTILS_H_\n"
      },
      {
        "name": "win32_window.cpp",
        "path": "windows/runner/win32_window.cpp",
        "type": "blob",
        "content": "#include \"win32_window.h\"\n\n#include <dwmapi.h>\n#include <flutter_windows.h>\n\n#include \"resource.h\"\n\nnamespace {\n\n/// Window attribute that enables dark mode window decorations.\n///\n/// Redefined in case the developer's machine has a Windows SDK older than\n/// version 10.0.22000.0.\n/// See: https://docs.microsoft.com/windows/win32/api/dwmapi/ne-dwmapi-dwmwindowattribute\n#ifndef DWMWA_USE_IMMERSIVE_DARK_MODE\n#define DWMWA_USE_IMMERSIVE_DARK_MODE 20\n#endif\n\nconstexpr const wchar_t kWindowClassName[] = L\"FLUTTER_RUNNER_WIN32_WINDOW\";\n\n/// Registry key for app theme preference.\n///\n/// A value of 0 indicates apps should use dark mode. A non-zero or missing\n/// value indicates apps should use light mode.\nconstexpr const wchar_t kGetPreferredBrightnessRegKey[] =\n  L\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Themes\\\\Personalize\";\nconstexpr const wchar_t kGetPreferredBrightnessRegValue[] = L\"AppsUseLightTheme\";\n\n// The number of Win32Window objects that currently exist.\nstatic int g_active_window_count = 0;\n\nusing EnableNonClientDpiScaling = BOOL __stdcall(HWND hwnd);\n\n// Scale helper to convert logical scaler values to physical using passed in\n// scale factor\nint Scale(int source, double scale_factor) {\n  return static_cast<int>(source * scale_factor);\n}\n\n// Dynamically loads the |EnableNonClientDpiScaling| from the User32 module.\n// This API is only needed for PerMonitor V1 awareness mode.\nvoid EnableFullDpiSupportIfAvailable(HWND hwnd) {\n  HMODULE user32_module = LoadLibraryA(\"User32.dll\");\n  if (!user32_module) {\n    return;\n  }\n  auto enable_non_client_dpi_scaling =\n      reinterpret_cast<EnableNonClientDpiScaling*>(\n          GetProcAddress(user32_module, \"EnableNonClientDpiScaling\"));\n  if (enable_non_client_dpi_scaling != nullptr) {\n    enable_non_client_dpi_scaling(hwnd);\n  }\n  FreeLibrary(user32_module);\n}\n\n}  // namespace\n\n// Manages the Win32Window's window class registration.\nclass WindowClassRegistrar {\n public:\n  ~WindowClassRegistrar() = default;\n\n  // Returns the singleton registrar instance.\n  static WindowClassRegistrar* GetInstance() {\n    if (!instance_) {\n      instance_ = new WindowClassRegistrar();\n    }\n    return instance_;\n  }\n\n  // Returns the name of the window class, registering the class if it hasn't\n  // previously been registered.\n  const wchar_t* GetWindowClass();\n\n  // Unregisters the window class. Should only be called if there are no\n  // instances of the window.\n  void UnregisterWindowClass();\n\n private:\n  WindowClassRegistrar() = default;\n\n  static WindowClassRegistrar* instance_;\n\n  bool class_registered_ = false;\n};\n\nWindowClassRegistrar* WindowClassRegistrar::instance_ = nullptr;\n\nconst wchar_t* WindowClassRegistrar::GetWindowClass() {\n  if (!class_registered_) {\n    WNDCLASS window_class{};\n    window_class.hCursor = LoadCursor(nullptr, IDC_ARROW);\n    window_class.lpszClassName = kWindowClassName;\n    window_class.style = CS_HREDRAW | CS_VREDRAW;\n    window_class.cbClsExtra = 0;\n    window_class.cbWndExtra = 0;\n    window_class.hInstance = GetModuleHandle(nullptr);\n    window_class.hIcon =\n        LoadIcon(window_class.hInstance, MAKEINTRESOURCE(IDI_APP_ICON));\n    window_class.hbrBackground = 0;\n    window_class.lpszMenuName = nullptr;\n    window_class.lpfnWndProc = Win32Window::WndProc;\n    RegisterClass(&window_class);\n    class_registered_ = true;\n  }\n  return kWindowClassName;\n}\n\nvoid WindowClassRegistrar::UnregisterWindowClass() {\n  UnregisterClass(kWindowClassName, nullptr);\n  class_registered_ = false;\n}\n\nWin32Window::Win32Window() {\n  ++g_active_window_count;\n}\n\nWin32Window::~Win32Window() {\n  --g_active_window_count;\n  Destroy();\n}\n\nbool Win32Window::Create(const std::wstring& title,\n                         const Point& origin,\n                         const Size& size) {\n  Destroy();\n\n  const wchar_t* window_class =\n      WindowClassRegistrar::GetInstance()->GetWindowClass();\n\n  const POINT target_point = {static_cast<LONG>(origin.x),\n                              static_cast<LONG>(origin.y)};\n  HMONITOR monitor = MonitorFromPoint(target_point, MONITOR_DEFAULTTONEAREST);\n  UINT dpi = FlutterDesktopGetDpiForMonitor(monitor);\n  double scale_factor = dpi / 96.0;\n\n  HWND window = CreateWindow(\n      window_class, title.c_str(), WS_OVERLAPPEDWINDOW,\n      Scale(origin.x, scale_factor), Scale(origin.y, scale_factor),\n      Scale(size.width, scale_factor), Scale(size.height, scale_factor),\n      nullptr, nullptr, GetModuleHandle(nullptr), this);\n\n  if (!window) {\n    return false;\n  }\n\n  UpdateTheme(window);\n\n  return OnCreate();\n}\n\nbool Win32Window::Show() {\n  return ShowWindow(window_handle_, SW_SHOWNORMAL);\n}\n\n// static\nLRESULT CALLBACK Win32Window::WndProc(HWND const window,\n                                      UINT const message,\n                                      WPARAM const wparam,\n                                      LPARAM const lparam) noexcept {\n  if (message == WM_NCCREATE) {\n    auto window_struct = reinterpret_cast<CREATESTRUCT*>(lparam);\n    SetWindowLongPtr(window, GWLP_USERDATA,\n                     reinterpret_cast<LONG_PTR>(window_struct->lpCreateParams));\n\n    auto that = static_cast<Win32Window*>(window_struct->lpCreateParams);\n    EnableFullDpiSupportIfAvailable(window);\n    that->window_handle_ = window;\n  } else if (Win32Window* that = GetThisFromHandle(window)) {\n    return that->MessageHandler(window, message, wparam, lparam);\n  }\n\n  return DefWindowProc(window, message, wparam, lparam);\n}\n\nLRESULT\nWin32Window::MessageHandler(HWND hwnd,\n                            UINT const message,\n                            WPARAM const wparam,\n                            LPARAM const lparam) noexcept {\n  switch (message) {\n    case WM_DESTROY:\n      window_handle_ = nullptr;\n      Destroy();\n      if (quit_on_close_) {\n        PostQuitMessage(0);\n      }\n      return 0;\n\n    case WM_DPICHANGED: {\n      auto newRectSize = reinterpret_cast<RECT*>(lparam);\n      LONG newWidth = newRectSize->right - newRectSize->left;\n      LONG newHeight = newRectSize->bottom - newRectSize->top;\n\n      SetWindowPos(hwnd, nullptr, newRectSize->left, newRectSize->top, newWidth,\n                   newHeight, SWP_NOZORDER | SWP_NOACTIVATE);\n\n      return 0;\n    }\n    case WM_SIZE: {\n      RECT rect = GetClientArea();\n      if (child_content_ != nullptr) {\n        // Size and position the child window.\n        MoveWindow(child_content_, rect.left, rect.top, rect.right - rect.left,\n                   rect.bottom - rect.top, TRUE);\n      }\n      return 0;\n    }\n\n    case WM_ACTIVATE:\n      if (child_content_ != nullptr) {\n        SetFocus(child_content_);\n      }\n      return 0;\n\n    case WM_DWMCOLORIZATIONCOLORCHANGED:\n      UpdateTheme(hwnd);\n      return 0;\n  }\n\n  return DefWindowProc(window_handle_, message, wparam, lparam);\n}\n\nvoid Win32Window::Destroy() {\n  OnDestroy();\n\n  if (window_handle_) {\n    DestroyWindow(window_handle_);\n    window_handle_ = nullptr;\n  }\n  if (g_active_window_count == 0) {\n    WindowClassRegistrar::GetInstance()->UnregisterWindowClass();\n  }\n}\n\nWin32Window* Win32Window::GetThisFromHandle(HWND const window) noexcept {\n  return reinterpret_cast<Win32Window*>(\n      GetWindowLongPtr(window, GWLP_USERDATA));\n}\n\nvoid Win32Window::SetChildContent(HWND content) {\n  child_content_ = content;\n  SetParent(content, window_handle_);\n  RECT frame = GetClientArea();\n\n  MoveWindow(content, frame.left, frame.top, frame.right - frame.left,\n             frame.bottom - frame.top, true);\n\n  SetFocus(child_content_);\n}\n\nRECT Win32Window::GetClientArea() {\n  RECT frame;\n  GetClientRect(window_handle_, &frame);\n  return frame;\n}\n\nHWND Win32Window::GetHandle() {\n  return window_handle_;\n}\n\nvoid Win32Window::SetQuitOnClose(bool quit_on_close) {\n  quit_on_close_ = quit_on_close;\n}\n\nbool Win32Window::OnCreate() {\n  // No-op; provided for subclasses.\n  return true;\n}\n\nvoid Win32Window::OnDestroy() {\n  // No-op; provided for subclasses.\n}\n\nvoid Win32Window::UpdateTheme(HWND const window) {\n  DWORD light_mode;\n  DWORD light_mode_size = sizeof(light_mode);\n  LSTATUS result = RegGetValue(HKEY_CURRENT_USER, kGetPreferredBrightnessRegKey,\n                               kGetPreferredBrightnessRegValue,\n                               RRF_RT_REG_DWORD, nullptr, &light_mode,\n                               &light_mode_size);\n\n  if (result == ERROR_SUCCESS) {\n    BOOL enable_dark_mode = light_mode == 0;\n    DwmSetWindowAttribute(window, DWMWA_USE_IMMERSIVE_DARK_MODE,\n                          &enable_dark_mode, sizeof(enable_dark_mode));\n  }\n}\n"
      },
      {
        "name": "win32_window.h",
        "path": "windows/runner/win32_window.h",
        "type": "blob",
        "content": "#ifndef RUNNER_WIN32_WINDOW_H_\n#define RUNNER_WIN32_WINDOW_H_\n\n#include <windows.h>\n\n#include <functional>\n#include <memory>\n#include <string>\n\n// A class abstraction for a high DPI-aware Win32 Window. Intended to be\n// inherited from by classes that wish to specialize with custom\n// rendering and input handling\nclass Win32Window {\n public:\n  struct Point {\n    unsigned int x;\n    unsigned int y;\n    Point(unsigned int x, unsigned int y) : x(x), y(y) {}\n  };\n\n  struct Size {\n    unsigned int width;\n    unsigned int height;\n    Size(unsigned int width, unsigned int height)\n        : width(width), height(height) {}\n  };\n\n  Win32Window();\n  virtual ~Win32Window();\n\n  // Creates a win32 window with |title| that is positioned and sized using\n  // |origin| and |size|. New windows are created on the default monitor. Window\n  // sizes are specified to the OS in physical pixels, hence to ensure a\n  // consistent size this function will scale the inputted width and height as\n  // as appropriate for the default monitor. The window is invisible until\n  // |Show| is called. Returns true if the window was created successfully.\n  bool Create(const std::wstring& title, const Point& origin, const Size& size);\n\n  // Show the current window. Returns true if the window was successfully shown.\n  bool Show();\n\n  // Release OS resources associated with window.\n  void Destroy();\n\n  // Inserts |content| into the window tree.\n  void SetChildContent(HWND content);\n\n  // Returns the backing Window handle to enable clients to set icon and other\n  // window properties. Returns nullptr if the window has been destroyed.\n  HWND GetHandle();\n\n  // If true, closing this window will quit the application.\n  void SetQuitOnClose(bool quit_on_close);\n\n  // Return a RECT representing the bounds of the current client area.\n  RECT GetClientArea();\n\n protected:\n  // Processes and route salient window messages for mouse handling,\n  // size change and DPI. Delegates handling of these to member overloads that\n  // inheriting classes can handle.\n  virtual LRESULT MessageHandler(HWND window,\n                                 UINT const message,\n                                 WPARAM const wparam,\n                                 LPARAM const lparam) noexcept;\n\n  // Called when CreateAndShow is called, allowing subclass window-related\n  // setup. Subclasses should return false if setup fails.\n  virtual bool OnCreate();\n\n  // Called when Destroy is called.\n  virtual void OnDestroy();\n\n private:\n  friend class WindowClassRegistrar;\n\n  // OS callback called by message pump. Handles the WM_NCCREATE message which\n  // is passed when the non-client area is being created and enables automatic\n  // non-client DPI scaling so that the non-client area automatically\n  // responds to changes in DPI. All other messages are handled by\n  // MessageHandler.\n  static LRESULT CALLBACK WndProc(HWND const window,\n                                  UINT const message,\n                                  WPARAM const wparam,\n                                  LPARAM const lparam) noexcept;\n\n  // Retrieves a class instance pointer for |window|\n  static Win32Window* GetThisFromHandle(HWND const window) noexcept;\n\n  // Update the window frame's theme to match the system theme.\n  static void UpdateTheme(HWND const window);\n\n  bool quit_on_close_ = false;\n\n  // window handle for top level window.\n  HWND window_handle_ = nullptr;\n\n  // window handle for hosted content.\n  HWND child_content_ = nullptr;\n};\n\n#endif  // RUNNER_WIN32_WINDOW_H_\n"
      },
      {
        "name": "barData.dart",
        "path": "lib/graph/barData.dart",
        "type": "blob",
        "content": "import 'package:project02_hackloop/graph/indivisualBar.dart';\n\nclass BarData {\n  final int d0;\n  final int d1;\n  final int d2;\n  final int d3;\n  final int d4;\n  final int d5;\n  final int d6;\n\n  BarData({\n    required this.d0,\n    required this.d1,\n    required this.d2,\n    required this.d3,\n    required this.d4,\n    required this.d5,\n    required this.d6,\n  });\n\n  List<indivisualBar> barData = [];\n\n  void initializeBarData() {\n    barData = [\n      indivisualBar(x: 0, y: d0.toDouble()),\n      indivisualBar(x: 1, y: d1.toDouble()),\n      indivisualBar(x: 2, y: d2.toDouble()),\n      indivisualBar(x: 3, y: d3.toDouble()),\n      indivisualBar(x: 4, y: d4.toDouble()),\n      indivisualBar(x: 5, y: d5.toDouble()),\n      indivisualBar(x: 6, y: d6.toDouble()),\n    ];\n  }\n}\n"
      },
      {
        "name": "signin.dart",
        "path": "lib/screens/signin.dart",
        "type": "blob",
        "content": "import 'package:flutter/material.dart';\nimport 'package:project02_hackloop/admins/adminHome.dart';\nimport 'package:project02_hackloop/screens/navig.dart';\nimport 'package:project02_hackloop/utils/color.dart';\nimport 'package:project02_hackloop/widgets/reusable.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\n\nclass SignIn extends StatefulWidget {\n  const SignIn({super.key});\n\n  @override\n  State<SignIn> createState() => _SignInState();\n}\n\nclass _SignInState extends State<SignIn> {\n  TextEditingController _passwordTextController = TextEditingController();\n  TextEditingController _emailTextController = TextEditingController();\n\n  Future<void> addAuthentication() async {\n    try {\n      await FirebaseAuth.instance\n          .signInWithEmailAndPassword(\n              email: _emailTextController.text,\n              password: _passwordTextController.text)\n          .then((value) async {\n        String username = getUsername();\n        print('Username: $username');\n        Navigator.pushReplacement(\n          context,\n          MaterialPageRoute(builder: (context) => isAdmin(getUsername())),\n        );\n      });\n    } on FirebaseAuthException catch (e) {\n      if (e.code == 'user-not-found') {\n        print('No user found for that email.');\n      } else if (e.code == 'invalid-credential') {\n        showDialog(\n            context: context,\n            builder: (context) => alertMe(\n                context,\n                \"Wrong Password\",\n                [\n                  TextButton(\n                      onPressed: () {\n                        Navigator.of(context).pop();\n                      },\n                      child: Text(\"Ok\"))\n                ],\n                Text(\"Wrong Password, Try Again\")));\n      } else {\n        print(\"Auth done!\");\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n          width: MediaQuery.of(context).size.width,\n          height: MediaQuery.of(context).size.height,\n          decoration: BoxDecoration(\n              gradient: LinearGradient(\n            colors: [toColor(\"BB1009\"), toColor(\"610000\")],\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n          )),\n          child: SingleChildScrollView(\n              child: Padding(\n            padding: EdgeInsets.fromLTRB(30, 80, 30, 0),\n            child: Column(children: <Widget>[\n              SizedBox(\n                height: MediaQuery.of(context).size.height / 2 - 200,\n              ),\n              Padding(\n                  padding: EdgeInsets.fromLTRB(0, 0, 0, 30),\n                  child: logoWidget(\"assets/logo/meals_large.png\", 320, 80)),\n              reusableTextField(\"Enter UserName\", Icons.person_outline, false,\n                  _emailTextController),\n              const SizedBox(\n                height: 20,\n              ),\n              reusableTextField(\"Enter Password\", Icons.lock_outline, true,\n                  _passwordTextController),\n              const SizedBox(height: 5),\n              Padding(\n                  padding: EdgeInsets.fromLTRB(\n                    0,\n                    10,\n                    0,\n                    0,\n                  ),\n                  child: uiButton(context, \"Login\", addAuthentication)),\n              Padding(\n                  padding: EdgeInsets.fromLTRB(10, 10, 10, 0),\n                  child: fadeMeIn(\n                      Text(\n                        \"M.E.A.L.S. (Meal Efficiency & Automated Logistics System)\",\n                        style:\n                            TextStyle(color: toColor(\"d4d4d4\"), fontSize: 12),\n                        textAlign: TextAlign.center,\n                      ),\n                      150)),\n            ]),\n          ))),\n    );\n  }\n}\n\nisAdmin(username) {\n  bool truth = (username == \"meals.admn\");\n  return truth ? adminHome() : navigation();\n}\n"
      },
      {
        "name": "CMakeLists.txt",
        "path": "linux/flutter/CMakeLists.txt",
        "type": "blob",
        "content": "# This file controls Flutter-level build steps. It should not be edited.\ncmake_minimum_required(VERSION 3.10)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\n\n# Serves the same purpose as list(TRANSFORM ... PREPEND ...),\n# which isn't available in 3.10.\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n\n# === Flutter Library ===\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n"
      },
      {
        "name": "flutter_window.h",
        "path": "windows/runner/flutter_window.h",
        "type": "blob",
        "content": "#ifndef RUNNER_FLUTTER_WINDOW_H_\n#define RUNNER_FLUTTER_WINDOW_H_\n\n#include <flutter/dart_project.h>\n#include <flutter/flutter_view_controller.h>\n\n#include <memory>\n\n#include \"win32_window.h\"\n\n// A window that does nothing but host a Flutter view.\nclass FlutterWindow : public Win32Window {\n public:\n  // Creates a new FlutterWindow hosting a Flutter view running |project|.\n  explicit FlutterWindow(const flutter::DartProject& project);\n  virtual ~FlutterWindow();\n\n protected:\n  // Win32Window:\n  bool OnCreate() override;\n  void OnDestroy() override;\n  LRESULT MessageHandler(HWND window, UINT const message, WPARAM const wparam,\n                         LPARAM const lparam) noexcept override;\n\n private:\n  // The project to run.\n  flutter::DartProject project_;\n\n  // The Flutter instance hosted by this window.\n  std::unique_ptr<flutter::FlutterViewController> flutter_controller_;\n};\n\n#endif  // RUNNER_FLUTTER_WINDOW_H_\n"
      },
      {
        "name": "CMakeLists.txt",
        "path": "windows/flutter/CMakeLists.txt",
        "type": "blob",
        "content": "# This file controls Flutter-level build steps. It should not be edited.\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n"
      },
      {
        "name": "main.cpp",
        "path": "windows/runner/main.cpp",
        "type": "blob",
        "content": "#include <flutter/dart_project.h>\n#include <flutter/flutter_view_controller.h>\n#include <windows.h>\n\n#include \"flutter_window.h\"\n#include \"utils.h\"\n\nint APIENTRY wWinMain(_In_ HINSTANCE instance, _In_opt_ HINSTANCE prev,\n                      _In_ wchar_t *command_line, _In_ int show_command) {\n  // Attach to console when present (e.g., 'flutter run') or create a\n  // new console when running with a debugger.\n  if (!::AttachConsole(ATTACH_PARENT_PROCESS) && ::IsDebuggerPresent()) {\n    CreateAndAttachConsole();\n  }\n\n  // Initialize COM, so that it is available for use in the library and/or\n  // plugins.\n  ::CoInitializeEx(nullptr, COINIT_APARTMENTTHREADED);\n\n  flutter::DartProject project(L\"data\");\n\n  std::vector<std::string> command_line_arguments =\n      GetCommandLineArguments();\n\n  project.set_dart_entrypoint_arguments(std::move(command_line_arguments));\n\n  FlutterWindow window(project);\n  Win32Window::Point origin(10, 10);\n  Win32Window::Size size(1280, 720);\n  if (!window.Create(L\"project02_hackloop\", origin, size)) {\n    return EXIT_FAILURE;\n  }\n  window.SetQuitOnClose(true);\n\n  ::MSG msg;\n  while (::GetMessage(&msg, nullptr, 0, 0)) {\n    ::TranslateMessage(&msg);\n    ::DispatchMessage(&msg);\n  }\n\n  ::CoUninitialize();\n  return EXIT_SUCCESS;\n}\n"
      },
      {
        "name": "utils.cpp",
        "path": "windows/runner/utils.cpp",
        "type": "blob",
        "content": "#include \"utils.h\"\n\n#include <flutter_windows.h>\n#include <io.h>\n#include <stdio.h>\n#include <windows.h>\n\n#include <iostream>\n\nvoid CreateAndAttachConsole() {\n  if (::AllocConsole()) {\n    FILE *unused;\n    if (freopen_s(&unused, \"CONOUT$\", \"w\", stdout)) {\n      _dup2(_fileno(stdout), 1);\n    }\n    if (freopen_s(&unused, \"CONOUT$\", \"w\", stderr)) {\n      _dup2(_fileno(stdout), 2);\n    }\n    std::ios::sync_with_stdio();\n    FlutterDesktopResyncOutputStreams();\n  }\n}\n\nstd::vector<std::string> GetCommandLineArguments() {\n  // Convert the UTF-16 command line arguments to UTF-8 for the Engine to use.\n  int argc;\n  wchar_t** argv = ::CommandLineToArgvW(::GetCommandLineW(), &argc);\n  if (argv == nullptr) {\n    return std::vector<std::string>();\n  }\n\n  std::vector<std::string> command_line_arguments;\n\n  // Skip the first argument as it's the binary name.\n  for (int i = 1; i < argc; i++) {\n    command_line_arguments.push_back(Utf8FromUtf16(argv[i]));\n  }\n\n  ::LocalFree(argv);\n\n  return command_line_arguments;\n}\n\nstd::string Utf8FromUtf16(const wchar_t* utf16_string) {\n  if (utf16_string == nullptr) {\n    return std::string();\n  }\n  int target_length = ::WideCharToMultiByte(\n      CP_UTF8, WC_ERR_INVALID_CHARS, utf16_string,\n      -1, nullptr, 0, nullptr, nullptr)\n    -1; // remove the trailing null character\n  int input_length = (int)wcslen(utf16_string);\n  std::string utf8_string;\n  if (target_length <= 0 || target_length > utf8_string.max_size()) {\n    return utf8_string;\n  }\n  utf8_string.resize(target_length);\n  int converted_length = ::WideCharToMultiByte(\n      CP_UTF8, WC_ERR_INVALID_CHARS, utf16_string,\n      input_length, utf8_string.data(), target_length, nullptr, nullptr);\n  if (converted_length == 0) {\n    return std::string();\n  }\n  return utf8_string;\n}\n"
      }
    ]
  }
}